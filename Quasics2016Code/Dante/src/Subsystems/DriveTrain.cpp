// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include "DriveTrain.h"
#include "../RobotMap.h"

DriveTrain::DriveTrain() :
		Subsystem("DriveTrain") {
	frontLeft = RobotMap::driveTrainFrontLeft;
	backLeft = RobotMap::driveTrainBackLeft;
	frontRight = RobotMap::driveTrainFrontRight;
	backRight = RobotMap::driveTrainBackRight;
	leftEncoder = RobotMap::driveTrainLeftEncoder;
	rightEncoder = RobotMap::driveTrainRightEncoder;
	try {
		/* Communicate w/navX-MXP via the MXP SPI Bus.                                       */
		/* Alternatively:  I2C::Port::kMXP, SerialPort::Port::kMXP or SerialPort::Port::kUSB */
		/* See http://navx-mxp.kauailabs.com/guidance/selecting-an-interface/ for details.   */
		navx.reset(new AHRS(SPI::Port::kMXP));
	} catch (const std::exception& ex) {
		std::string err_string = "Error instantiating navX-MXP:  ";
		err_string += ex.what();
		DriverStation::ReportError(err_string.c_str());
	}
}

void DriveTrain::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	// SetDefaultCommand(new MySpecialCommand());
}

//Motor Output
void DriveTrain::SetLeftPower(double power) {
	frontLeft->Set(power);
	backLeft->Set(power);
}

void DriveTrain::SetRightPower(double power) {
	frontRight->Set(power);
	backRight->Set(power);
}

void DriveTrain::Stop() {
	SetLeftPower(0);
	SetRightPower(0);
}

//NavX
//Reading
double DriveTrain::GetNavXHeading(GyroAxis whichAxis) {
	switch (whichAxis){
	case kPitch:
	case kYaw:
	case kRoll:
	case kYawContinuous:
		// TODO: Add code to handle these cases.
		break;
	}

	return 0;
}

double DriveTrain::GetNavXAcceleration(AccelerometerAxis whichAxis) {
	return 0;
}

double DriveTrain::GetNavXDisplacement(AccelerometerAxis whichAxis) {
	return 0;
}

double DriveTrain::GetNavXVelocity(AccelerometerAxis whichAxis) {
	return 0;
}

//Reset
void DriveTrain::ResetYaw() {

}

void DriveTrain::ResetDisplacement() {

}

//Encoders
//Reading
double DriveTrain::GetLeftEncoderDistance() {
	return 0;
}

double DriveTrain::GetRightEncoderDistance() {
	return 0;
}

int DriveTrain::GetLeftEncoderCount() {
	return 0;
}

int DriveTrain::GetRightEncoderCount() {
	return 0;
}

double DriveTrain::GetLeftEncoderVelocity() {
	return 0;
}

double DriveTrain::GetRightEncoderVelocity() {
	return 0;
}

//Reset
void DriveTrain::ResetLeftEncoder() {

}

void DriveTrain::ResetRightEncoder() {

}

