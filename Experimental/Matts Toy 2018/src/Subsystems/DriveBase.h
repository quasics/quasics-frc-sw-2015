// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef DRIVEBASE_H
#define DRIVEBASE_H
#include "Commands/Subsystem.h"
#include "WPILib.h"

/**
 *
 *
 * @author ExampleAuthor
 */
class DriveBase: public frc::Subsystem {
private:
	// It's desirable that everything possible is private except
	// for methods that implement subsystem capabilities
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	std::shared_ptr<frc::SpeedController> frontLeftMotor;
	std::shared_ptr<frc::SpeedController> rearLeftMotor;
	std::shared_ptr<frc::SpeedControllerGroup> leftDriveMotors;
	std::shared_ptr<frc::SpeedController> frontRightMotor;
	std::shared_ptr<frc::SpeedController> rearRightMotor;
	std::shared_ptr<frc::SpeedControllerGroup> rightDriveMotors;
	std::shared_ptr<frc::DifferentialDrive> differentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
public:
	DriveBase();
	void InitDefaultCommand() override;
	void Periodic() override;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	void UpdateTankDrive(double leftSpeed, double rightSpeed, bool speedSensitive = true) {
		differentialDrive->TankDrive(leftSpeed, rightSpeed, speedSensitive);
	}
	void StopTankDrive() {
		differentialDrive->StopMotor();
	}
};

#endif
