// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#ifndef DRIVETRAIN_H
#define DRIVETRAIN_H
#include "Commands/Subsystem.h"
#include "WPILib.h"
#include "../ThirdParty/NavX/include/AHRS.h"
/**
 *
 *
 * @author ExampleAuthor
 */
class DriveTrain: public Subsystem {
private:
	std::shared_ptr<SpeedController> frontLeft;		//TalonSR Motor Controller
	std::shared_ptr<SpeedController> backLeft;		//TalonSR Motor Controller
	std::shared_ptr<SpeedController> frontRight;	//TalonSR Motor Controller
	std::shared_ptr<SpeedController> backRight;		//TalonSR Motor Controller
	std::shared_ptr<Encoder> leftEncoder;	//TalonSR Motor Controller
	std::shared_ptr<Encoder> rightEncoder;	//TalonSR Motor Controller
	std::shared_ptr<AHRS> navx;	//NavX-MXP sensor

public:
	DriveTrain();
	void InitDefaultCommand();

	//Motor Output
	void SetLeftPower(double power);// -1 - 1, Sets the power of the left side motors
	void SetRightPower(double power);// -1 - 1, Sets the power of the right side motors
	void Stop();	// Stop Moving

	//NavX
	//Data Types
	enum GyroAxis {		//Gyroscope Axes
		kPitch, kYaw, kRoll, kYawContinuous
	};
	enum AccelerometerAxis {	//Accelerometer Axes for NavX
		kX, kY, kZ
	};

	//Reading
	double GetNavXHeading(GyroAxis whichAxis);		// Reads the NavX gyroscopes
	double GetNavXAcceleration(AccelerometerAxis whichAxis);// Reads NavX Accelerometers
	double GetNavXDisplacement(AccelerometerAxis whichAxis);// Reads NavX Displacement
	double GetNavXVelocity(AccelerometerAxis whichAxis);// Reads NavX Velocity

	//Reset
	void ResetYaw();
	void ResetDisplacement();

	//Encoders
	//Reading
	double GetLeftEncoderDistance();	//Left Encoder distance in meters
	double GetRightEncoderDistance(); //Right Encoder distance in meters
	int GetLeftEncoderCount();		//Left Encoder count
	int GetRightEncoderCount();		//Right Encoder count
	double GetLeftEncoderVelocity();	//Left Encoder Velocity
	double GetRightEncoderVelocity();	//Right Encoder Velocity

	//Reset
	void ResetLeftEncoder ();	//Reset Left Encoder
	void ResetRightEncoder ();	//Reset Right Encoder
};

#endif
