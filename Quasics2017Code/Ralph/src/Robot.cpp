// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include "Robot.h"
#include "Commands/MoveForDistance.h"

#define Use_Camera

std::shared_ptr<DriveTrain> Robot::driveTrain;
std::shared_ptr<Navigation> Robot::gyro;
std::shared_ptr<Intake> Robot::intake;
std::shared_ptr<Outtake> Robot::outtake;
std::shared_ptr<Gear> Robot::gear;
std::unique_ptr<OI> Robot::oi;
std::shared_ptr<FuelExhaustGate> Robot::fuelExhaustGate;
std::shared_ptr<Climber> Robot::climber;
std::shared_ptr<Arduino> Robot::arduino;

void Robot::RobotInit() {
	RobotMap::init();

	// Build the subsystems
	driveTrain.reset(new DriveTrain());
	gyro.reset(new Navigation());
	outtake.reset(new Outtake());
	gear.reset(new Gear());
	intake.reset(new Intake());
	fuelExhaustGate.reset(new FuelExhaustGate());
	climber.reset(new Climber);
	arduino.reset(new Arduino);

	// Note: building the OI *must* be done after building the
	// subsystems, so that the commands it creates will have
	// the subsystems available.
	oi.reset(new OI());

	tankDrive.reset(new TankDrive);
	auxCommands.reset(new AuxiliaryCommands);
//Camera Init
#ifdef Use_Camera
	CameraServer::GetInstance()->StartAutomaticCapture(0).SetResolution(160,
			120);
#endif
}

/**
 * This function is called when the disabled button is hit.
 * You can use it to reset subsystems before shutting down.
 */

void Robot::DisabledInit() {

}

void Robot::DisabledPeriodic() {
	Scheduler::GetInstance()->Run();
}

void Robot::AutonomousInit() {
	if (autonomousCommand.get() != nullptr)
		autonomousCommand->Start();
}

void Robot::AutonomousPeriodic() {
	Scheduler::GetInstance()->Run();
}

void Robot::TeleopInit() {
	if (autonomousCommand.get() != nullptr)
		autonomousCommand->Cancel();
	tankDrive->Start();
	auxCommands->Start();
}

void Robot::TeleopPeriodic() {
	Scheduler::GetInstance()->Run();
}

void Robot::TestPeriodic() {
	lw->Run();
}

START_ROBOT_CLASS(Robot);

