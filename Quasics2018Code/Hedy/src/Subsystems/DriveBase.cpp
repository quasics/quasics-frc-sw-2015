// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include "DriveBase.h"
#include "../RobotMap.h"

#include <Encoder.h>
#include <SpeedControllerGroup.h>
#include <Commands/Subsystem.h>

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

DriveBase::DriveBase() : frc::Subsystem("DriveBase") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    leftFrontMotor = RobotMap::driveBaseLeftFrontMotor;
    leftRearMotor = RobotMap::driveBaseLeftRearMotor;
    leftMotors = RobotMap::driveBaseLeftMotors;
    rightFrontMotor = RobotMap::driveBaseRightFrontMotor;
    rightRearMotor = RobotMap::driveBaseRightRearMotor;
    rightMotors = RobotMap::driveBaseRightMotors;
    differentialDrive = RobotMap::driveBaseDifferentialDrive;
    leftEncoder = RobotMap::driveBaseLeftEncoder;
    rightEncoder = RobotMap::driveBaseRightEncoder;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void DriveBase::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

// Put methods for controlling this subsystem
// here. Call these from Commands.

void DriveBase::SetPowerToMotors(double leftPercent, double rightPercent) {
	differentialDrive->TankDrive(leftPercent, rightPercent, false);
//	leftMotors->Set(leftPercent);
//	rightMotors->Set(rightPercent);
}

//Encoders start here

double DriveBase::RightEncoderVelocity() {
	return rightEncoder->GetRate();
}

double DriveBase::LeftEncoderVelocity() {
	return leftEncoder->GetRate();
}


double DriveBase::RightEncoderDistance(){
	return rightEncoder->GetDistance();
}
double DriveBase::LeftEncoderDistance(){
	return leftEncoder->GetDistance();
}
uint32_t DriveBase::LeftEncoderRaw(){
	return rightEncoder->GetRaw();
}
uint32_t DriveBase::RightEncoderRaw(){
	return leftEncoder->GetRaw();
}


void DriveBase::RightEncoderReset(){
	leftEncoder->Reset();
}
void DriveBase::LeftEncoderReset(){
	rightEncoder->Reset();
}

//Encoders end here

void DriveBase::Stop(){
	SetPowerToMotors(0, 0);
}
