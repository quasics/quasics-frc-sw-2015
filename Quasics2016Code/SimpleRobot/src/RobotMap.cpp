// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<SpeedController> RobotMap::driveSystemSpeedController1;
std::shared_ptr<SpeedController> RobotMap::driveSystemSpeedController2;
std::shared_ptr<SpeedController> RobotMap::driveSystemSpeedController3;
std::shared_ptr<SpeedController> RobotMap::driveSystemSpeedController4;
std::shared_ptr<RobotDrive> RobotMap::driveSystemRobotDrive41;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    LiveWindow *lw = LiveWindow::GetInstance();

    driveSystemSpeedController1.reset(new Talon(0));
    lw->AddActuator("DriveSystem", "Speed Controller 1", (Talon&) driveSystemSpeedController1);
    
    driveSystemSpeedController2.reset(new Talon(1));
    lw->AddActuator("DriveSystem", "Speed Controller 2", (Talon&) driveSystemSpeedController2);
    
    driveSystemSpeedController3.reset(new Talon(2));
    lw->AddActuator("DriveSystem", "Speed Controller 3", (Talon&) driveSystemSpeedController3);
    
    driveSystemSpeedController4.reset(new Talon(3));
    lw->AddActuator("DriveSystem", "Speed Controller 4", (Talon&) driveSystemSpeedController4);
    
    driveSystemRobotDrive41.reset(new RobotDrive(driveSystemSpeedController1, driveSystemSpeedController2,
              driveSystemSpeedController3, driveSystemSpeedController4));
    
    driveSystemRobotDrive41->SetSafetyEnabled(true);
        driveSystemRobotDrive41->SetExpiration(0.1);
        driveSystemRobotDrive41->SetSensitivity(0.5);
        driveSystemRobotDrive41->SetMaxOutput(1.0);

        driveSystemRobotDrive41->SetInvertedMotor(RobotDrive::kFrontRightMotor, true);
        driveSystemRobotDrive41->SetInvertedMotor(RobotDrive::kRearRightMotor, true);


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
