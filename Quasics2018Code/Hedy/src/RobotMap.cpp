// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

#include "EncoderVariables.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<frc::SpeedController> RobotMap::driveBaseleftRearMotor;
std::shared_ptr<frc::SpeedController> RobotMap::driveBaseleftFrontMotor;
std::shared_ptr<frc::SpeedControllerGroup> RobotMap::driveBaseLeftMotors;
std::shared_ptr<frc::SpeedController> RobotMap::driveBaserightFrontMotor;
std::shared_ptr<frc::SpeedController> RobotMap::driveBaserightRearMotor;
std::shared_ptr<frc::SpeedControllerGroup> RobotMap::driveBaseRightMotors;
std::shared_ptr<frc::SpeedController> RobotMap::cubeManipulationleftShoulderMotor;
std::shared_ptr<frc::SpeedController> RobotMap::cubeManipulationrightShoulderMotor;
std::shared_ptr<frc::SpeedControllerGroup> RobotMap::cubeManipulationShoulderMotors;
std::shared_ptr<frc::SpeedController> RobotMap::cubeManipulationleftIntakeMotor;
std::shared_ptr<frc::SpeedController> RobotMap::cubeManipulationrightIntakeMotor;
std::shared_ptr<frc::SpeedControllerGroup> RobotMap::cubeManipulationIntakeMotors;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<Encoder> RobotMap::driveBaseleftEncoder;
std::shared_ptr<Encoder> RobotMap::driveBaserightEncoder;

// These are "helper functions", intended to work around some problems in the code
// that Robot Builder currently generates.  (It's still generating code like it
// did for 2017 and earlier, but things are different in 2018.)
template <class Controller>
inline Controller* createMotor(int port, const char* const subsystem, const char* const name) {
	Controller* const motor = new Controller(port);
	motor->SetSubsystem(subsystem);
	motor->SetName(name);
	return motor;
}
inline SpeedControllerGroup* createSpeedControllerGroup(SpeedController& motor1, SpeedController& motor2, const char* const subsystem, const char* const name) {
	SpeedControllerGroup* const speedControllerGroup = new SpeedControllerGroup(motor1, motor2);
	speedControllerGroup->SetSubsystem(subsystem);
	speedControllerGroup->SetName(name);
	return speedControllerGroup;
}

// #define USE_ROBOT_BUILDER_INIT

void RobotMap::init() {
// #define USE_ROBOT_BUILDER_INIT
#if !defined(USE_ROBOT_BUILDER_INIT)
	// NOTE: This code needs to be kept in sync with the stuff in the "#else" clause, below.
	// This version works around some outdated code produced by Robot Builder 2018, but if
	// we ever make updates in RobotBuilder and re-export the C++ code, it will be out of
	// sync with those changes, and will have to be updated manually.
	//
	// (On the other hand, this version of the code won't produce warnings when compiled,
	// which means that it's easier to see what's *really* wrong when the compiler finds
	// something funky.)

    driveBaseleftEncoder.reset(new Encoder(0, 1, true));
    driveBaseleftEncoder->SetDistancePerPulse(InchesPerTick);
    driveBaseleftEncoder->SetPIDSourceType(PIDSourceType::kRate);

    driveBaserightEncoder.reset(new Encoder(2, 3, false));
    driveBaserightEncoder->SetDistancePerPulse(InchesPerTick);
    driveBaserightEncoder->SetPIDSourceType(PIDSourceType::kRate);


	driveBaserightFrontMotor.reset(createMotor<Jaguar>(0, "Drive Base", "rightFrontMotor"));
	driveBaserightRearMotor.reset(createMotor<Jaguar>(1, "Drive Base", "rightRearMotor"));
    driveBaseleftFrontMotor.reset(createMotor<Jaguar>(2, "Drive Base", "leftFrontMotor"));
    driveBaseleftRearMotor.reset(createMotor<Jaguar>(3, "Drive Base", "leftRearMotor"));

    driveBaseLeftMotors.reset(createSpeedControllerGroup(*driveBaseleftFrontMotor, *driveBaseleftRearMotor, "DriveBase", "LeftDriveMotors"));
    driveBaseRightMotors.reset(createSpeedControllerGroup(*driveBaserightFrontMotor, *driveBaserightRearMotor, "DriveBase", "RightDriveMotors"));

    cubeManipulationleftShoulderMotor.reset(createMotor<Spark>(4, "CubeManipulation", "leftShoulderMotor"));
    cubeManipulationrightShoulderMotor.reset(createMotor<Spark>(5, "CubeManipulation", "rightShoulderMotor"));
    cubeManipulationleftIntakeMotor.reset(createMotor<Spark>(6, "CubeManipulation", "leftIntakeMotor"));
    cubeManipulationrightIntakeMotor.reset(createMotor<Spark>(7, "CubeManipulation", "rightIntakeMotor"));

    cubeManipulationShoulderMotors.reset(createSpeedControllerGroup(*cubeManipulationleftShoulderMotor, *cubeManipulationrightShoulderMotor, "CubeManipulation", "ShoulderMotors"));
    cubeManipulationIntakeMotors.reset(createSpeedControllerGroup(*cubeManipulationleftIntakeMotor, *cubeManipulationrightIntakeMotor, "CubeManipulation", "IntakeMotors"));
#else
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    frc::LiveWindow *lw = frc::LiveWindow::GetInstance();

    driveBaseleftRearMotor.reset(new frc::Talon(3));
    lw->AddActuator("DriveBase", "leftRearMotor", std::static_pointer_cast<frc::Talon>(driveBaseleftRearMotor));
    
    driveBaseleftFrontMotor.reset(new frc::Talon(2));
    lw->AddActuator("DriveBase", "leftFrontMotor", std::static_pointer_cast<frc::Talon>(driveBaseleftFrontMotor));
    
    driveBaseLeftMotors = std::make_shared<frc::SpeedControllerGroup>(*driveBaseleftFrontMotor, *driveBaseleftRearMotor  );
    lw->AddActuator("DriveBase", "LeftMotors", driveBaseLeftMotors);
    
    driveBaserightFrontMotor.reset(new frc::Talon(0));
    lw->AddActuator("DriveBase", "rightFrontMotor", std::static_pointer_cast<frc::Talon>(driveBaserightFrontMotor));
    
    driveBaserightRearMotor.reset(new frc::Talon(1));
    lw->AddActuator("DriveBase", "rightRearMotor", std::static_pointer_cast<frc::Talon>(driveBaserightRearMotor));
    
    driveBaseRightMotors = std::make_shared<frc::SpeedControllerGroup>(*driveBaserightFrontMotor, *driveBaserightRearMotor  );
    lw->AddActuator("DriveBase", "RightMotors", driveBaseRightMotors);
    
    cubeManipulationleftShoulderMotor.reset(new frc::Spark(4));
    lw->AddActuator("CubeManipulation", "leftShoulderMotor", std::static_pointer_cast<frc::Spark>(cubeManipulationleftShoulderMotor));
    
    cubeManipulationrightShoulderMotor.reset(new frc::Spark(5));
    lw->AddActuator("CubeManipulation", "rightShoulderMotor", std::static_pointer_cast<frc::Spark>(cubeManipulationrightShoulderMotor));
    
    cubeManipulationShoulderMotors = std::make_shared<frc::SpeedControllerGroup>(*cubeManipulationleftShoulderMotor, *cubeManipulationrightShoulderMotor  );
    lw->AddActuator("CubeManipulation", "ShoulderMotors", cubeManipulationShoulderMotors);
    
    cubeManipulationleftIntakeMotor.reset(new frc::Spark(6));
    lw->AddActuator("CubeManipulation", "leftIntakeMotor", std::static_pointer_cast<frc::Spark>(cubeManipulationleftIntakeMotor));
    
    cubeManipulationrightIntakeMotor.reset(new frc::Spark(7));
    lw->AddActuator("CubeManipulation", "rightIntakeMotor", std::static_pointer_cast<frc::Spark>(cubeManipulationrightIntakeMotor));
    
    cubeManipulationIntakeMotors = std::make_shared<frc::SpeedControllerGroup>(*cubeManipulationleftIntakeMotor, *cubeManipulationrightIntakeMotor  );
    lw->AddActuator("CubeManipulation", "IntakeMotors", cubeManipulationIntakeMotors);
    


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
#endif
}
