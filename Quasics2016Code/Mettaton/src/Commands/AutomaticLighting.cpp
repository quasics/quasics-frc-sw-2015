// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include "AutomaticLighting.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

AutomaticLighting::AutomaticLighting() :
		Command() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::lighting.get());
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void AutomaticLighting::Initialize() {

}

// Called repeatedly when this Command is scheduled to run
void AutomaticLighting::Execute() {
	if (DriverStation::GetInstance().IsDisabled())
		Robot::lighting->SetColor(Lighting::kRainbow);
	else if (!DriverStation::GetInstance().IsFMSAttached())
		Robot::lighting->SetColor(Lighting::kGreen);
	else if (DriverStation::GetInstance().GetAlliance()
			== DriverStation::GetInstance().kRed)
		Robot::lighting->SetColor(Lighting::kRed);
	else if (DriverStation::GetInstance().GetAlliance()
			== DriverStation::GetInstance().kBlue)
		Robot::lighting->SetColor(Lighting::kBlue);
	else
		Robot::lighting->SetColor(Lighting::kWhite);

	if (DriverStation::GetInstance().IsDisabled())
		Robot::lighting->SetDynamic(Lighting::kOn);
	else if (DriverStation::GetInstance().IsEnabled()
			&& DriverStation::GetInstance().IsAutonomous())
		Robot::lighting->SetDynamic(Lighting::kBlinking);
	else if (DriverStation::GetInstance().IsEnabled()
			&& DriverStation::GetInstance().IsOperatorControl())
		Robot::lighting->SetDynamic(Lighting::kBreathing);
	else
		Robot::lighting->SetDynamic(Lighting::kOn);
}

// Make this return true when this Command no longer needs to run execute()
bool AutomaticLighting::IsFinished() {
	return false;
}

// Called once after isFinished returns true
void AutomaticLighting::End() {

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void AutomaticLighting::Interrupted() {

}
