// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include "DriveTrain.h"
#include "../RobotMap.h"

DriveTrain::DriveTrain() :
		Subsystem("DriveTrain") {
	leftEncoder = RobotMap::driveTrainLeftEncoder;
	frontLeft = RobotMap::driveTrainFrontLeft;
	backLeft = RobotMap::driveTrainBackLeft;
	rightEncoder = RobotMap::driveTrainRightEncoder;
	frontRight = RobotMap::driveTrainFrontRight;
	backRight = RobotMap::driveTrainBackRight;
}

void DriveTrain::InitDefaultCommand() {

}

void DriveTrain::SetLeftPower(double percent) {
	frontLeft->Set(percent);
	backLeft->Set(percent);

}

void DriveTrain::SetRightPower(double percent) {
	frontRight->Set(percent);
	backRight->Set(percent);
}

void DriveTrain::SetTrimmedPower(double leftPercent, double rightPercent) {
	double leftPower = 0;
	double rightPower = 0;

	if (!(leftPercent == 0 || rightPercent == 0 || LeftEncoderVelocity() == 0
			|| RightEncoderVelocity() == 0)) {
		float leftMaxRate = LeftEncoderVelocity()
				/ leftPercent;
		float rightMaxRate = RightEncoderVelocity()
				/ rightPercent;
		if (leftMaxRate >= rightMaxRate) {
			leftPower = leftPercent;
			rightPower = rightPercent * leftMaxRate / rightMaxRate;
		} else {
			leftPower = leftPercent * rightMaxRate / leftMaxRate;
			rightPower = rightPercent;
		}
	} else {
		if (leftPercent >= rightPercent) {
			leftPower = leftPercent;
			rightPower = 0;
		} else {
			leftPower = 0;
			rightPower = rightPercent;
		}
	}

	SetLeftPower(leftPower);
	SetRightPower(rightPower);
}

double DriveTrain::RightEncoderVelocity() {
	return rightEncoder->GetRate();
}

double DriveTrain::LeftEncoderVelocity() {
	return leftEncoder->GetRate();
}

void DriveTrain::RightEncoderReset() {
	rightEncoder->Reset();
}

void DriveTrain::LeftEncoderReset() {
	leftEncoder->Reset();
}

double DriveTrain::RightEncoderDistance() {
	return rightEncoder->GetDistance();
}

double DriveTrain::LeftEncoderDistance() {
	return leftEncoder->GetDistance();
}

void DriveTrain::Stop() {
	frontRight->StopMotor();
	frontLeft->StopMotor();
	backRight->StopMotor();
	backLeft->StopMotor();
}
