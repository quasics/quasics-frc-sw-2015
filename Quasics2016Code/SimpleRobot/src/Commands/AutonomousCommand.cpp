// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include "AutonomousCommand.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

AutonomousCommand::AutonomousCommand() :
		Command() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

	deadliestMove = kStop;
	danceStage = 0;
	isFinished = false;
}

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void AutonomousCommand::Initialize() {
	deadliestMove = kStop;
	danceStage = 0;
	isFinished = false;
	Robot::driveSystem->ResetDisplacement();
	Robot::driveSystem->ResetYaw();
}

// Called repeatedly when this Command is scheduled to run
void AutonomousCommand::Execute() {
	switch (danceStage) {
	case 0:
		deadliestMove = kForward;
		if (Robot::driveSystem->GetDisplacementX() >= 1) {
			danceStage++;
		}
		break;
	case 1:
		deadliestMove = kBackward;
		if (Robot::driveSystem->GetDisplacementX() <= 0) {
			danceStage++;
		}
		break;
	case 2:
		deadliestMove = kTurnLeft;
		if (Robot::driveSystem->GetContinuousYaw() >=90){
			danceStage++;
		}
		break;
	case 3:
		deadliestMove = kForward;
		if (Robot::driveSystem->GetDisplacementX() >= .5) {
			danceStage++;
		}
		break;
	case 4:
		deadliestMove = kBackward;
		if (Robot::driveSystem->GetDisplacementX() <= -.5) {
			danceStage++;
		}
		break;
	case 5:
		deadliestMove = kForward;
		if (Robot::driveSystem->GetDisplacementX() >= 1) {
			danceStage++;
		}
		break;
	case 6:
		deadliestMove = kBackward;
		if (Robot::driveSystem->GetDisplacementX() <= -.5) {
			danceStage++;
		}
		break;
	case 7:
		deadliestMove = kForward;
		if (Robot::driveSystem->GetDisplacementX() >= 0) {
			danceStage++;
		}
		break;
	default:
		deadliestMove = kStop;
		isFinished = true;
	}

	switch (deadliestMove) {
	case kForward:
		Robot::driveSystem->MoveLeft(25);
		Robot::driveSystem->MoveRight(25);
		break;
	case kBackward:
		Robot::driveSystem->MoveLeft(-25);
		Robot::driveSystem->MoveRight(-25);
		break;
	case kTurnLeft:
		Robot::driveSystem->MoveLeft(-25);
		Robot::driveSystem->MoveRight(25);
		break;
	case kTurnRight:
		Robot::driveSystem->MoveLeft(25);
		Robot::driveSystem->MoveRight(-25);
		break;
	default:
		Robot::driveSystem->StopEverything();
	}
}

// Make this return true when this Command no longer needs to run execute()
bool AutonomousCommand::IsFinished() {
	return isFinished;
}

// Called once after isFinished returns true
void AutonomousCommand::End() {
	Robot::driveSystem->StopEverything();
	printf(" b\n a\n b\n a\n start\n");
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void AutonomousCommand::Interrupted() {
	Robot::driveSystem->StopEverything();
}
