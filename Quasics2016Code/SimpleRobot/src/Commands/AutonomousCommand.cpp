// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
#include "AutonomousCommand.h"

#include <iostream>
#include "../Robot.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

AutonomousCommand::AutonomousCommand(int TargetPosition) :
    AutonomousCommand(FieldPosition(TargetPosition)) {
}

AutonomousCommand::AutonomousCommand(FieldPosition targetPosition) :
    m_TargetPosition(targetPosition), isEndstep(false), autoStage(0), endstepTimer(
        0) {
    // Use requires() here to declare subsystem dependencies
    Requires(Robot::driveSystem.get());

    Robot::driveSystem->ResetEncoders();
    Robot::driveSystem->ResetYaw();
}

// Called just before this Command runs the first time
void AutonomousCommand::Initialize() {
    isEndstep = false;
    autoStage = 0;
    endstepTimer = 0;

    Robot::driveSystem->ResetEncoders();
    Robot::driveSystem->ResetYaw();
}

// Called repeatedly when this Command is scheduled to run
void AutonomousCommand::Execute() {
#ifndef SIMPLE_AUTO_MODE
    if (!isEndstep) {
        switch (m_TargetPosition) {
            case ePosition1:
                isEndstep = Auto1();
                break;

            case ePosition2:
                isEndstep = Auto2();
                break;

            case ePosition3:
                isEndstep = Auto3();
                break;

            case ePosition4:
                isEndstep = Auto4();
                break;

            case ePosition5:
                isEndstep = Auto5();
                break;

            case ePositionNull:     // Do nothing!
            default:
                isEndstep = true;
                break;
        }
    }
    else if (endstepTimer <= 50) {
        Robot::intakeArm->SetArmDirection(IntakeArm::kFalling);
        Robot::driveSystem->StopEverything();
        endstepTimer++;
    }
    else {
        Robot::intake->SetPower(Intake::kOutput);
        Robot::driveSystem->StopEverything();
    }
#else
    if (!isEndstep) {
        if (m_TargetPosition != ePosition1
                && m_TargetPosition != ePositionNull) {

            Robot::driveSystem->MoveLeft(.8);
            Robot::driveSystem->MoveRight(.8);
        }
        else {
            isEndstep = true;
            Robot::driveSystem->MoveLeft(0);
            Robot::driveSystem->MoveRight(0);
        }

        if (Robot::driveSystem->GetEncoderDistance(DriveSystem::kLeft) >= 2.5) {
            isEndstep = true;
            Robot::driveSystem->MoveLeft(0);
            Robot::driveSystem->MoveRight(0);
        }
        else {
            Robot::driveSystem->MoveLeft(0);
            Robot::driveSystem->MoveRight(0);
        }
#endif

}
};

// Make this return true when this Command no longer needs to run execute()
bool AutonomousCommand::IsFinished() {
    return false;
}

// Called once after isFinished returns true
void AutonomousCommand::End() {
    StopOperations();
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void AutonomousCommand::Interrupted() {
    StopOperations();
}

void AutonomousCommand::StopOperations() {
    Robot::intake->StopIntake();
    Robot::intakeArm->StopArm();
    Robot::driveSystem->StopEverything();
}

bool AutonomousCommand::Auto1() {
    static bool isFinished = false;

    switch (autoStage) {
        case 0:
            Robot::driveSystem->ResetEncoders();
            Robot::driveSystem->ResetYaw();
            autoStage = 1;
            break;
        case 1:
            //Motor Stuff
            if (Robot::driveSystem->GetContinuousYaw() > 2.5) {
                Robot::driveSystem->MoveLeft(50);
                Robot::driveSystem->MoveRight(45);
            }
            else if (Robot::driveSystem->GetContinuousYaw() < -2.5) {
                Robot::driveSystem->MoveLeft(45);
                Robot::driveSystem->MoveRight(50);
            }
            else {
                Robot::driveSystem->MoveLeft(50);
                Robot::driveSystem->MoveRight(50);
            }

            if (Robot::driveSystem->GetEncoderDistance(DriveSystem::kLeft)
                    >= 1.34) {
                Robot::driveSystem->ResetEncoders();
                Robot::driveSystem->ResetYaw();
                autoStage = 4;
                //reset Sensors
            }
            break;
        case 2:
            Robot::driveSystem->MoveLeft(50);
            Robot::driveSystem->MoveRight(-50);

            if (Robot::driveSystem->GetContinuousYaw() >= -30) {
                Robot::driveSystem->ResetEncoders();
                Robot::driveSystem->ResetYaw();
                autoStage = 5;
            }
            break;
        case 3:
            //Motor Stuff
            if (Robot::driveSystem->GetContinuousYaw() > 2.5) {
                Robot::driveSystem->MoveLeft(50);
                Robot::driveSystem->MoveRight(45);
            }
            else if (Robot::driveSystem->GetContinuousYaw() < -2.5) {
                Robot::driveSystem->MoveLeft(45);
                Robot::driveSystem->MoveRight(50);
            }
            else {
                Robot::driveSystem->MoveLeft(50);
                Robot::driveSystem->MoveRight(50);
            }

            if (Robot::driveSystem->GetEncoderDistance(DriveSystem::kLeft)
                    >= 2.83) {
                Robot::driveSystem->ResetEncoders();
                Robot::driveSystem->ResetYaw();
                isFinished = true;
                //reset Sensors
            }
            break;

        default:
            isFinished = true;
    }
    return isFinished;
}

bool AutonomousCommand::Auto2() {
    static bool isFinished = false;

    switch (autoStage) {
        case 0:
            Robot::driveSystem->ResetEncoders();
            Robot::driveSystem->ResetYaw();
            autoStage = 1;
            break;
        case 1:
            //Motor Stuff
            if (Robot::driveSystem->GetContinuousYaw() > 2.5) {
                Robot::driveSystem->MoveLeft(50);
                Robot::driveSystem->MoveRight(45);
            }
            else if (Robot::driveSystem->GetContinuousYaw() < -2.5) {
                Robot::driveSystem->MoveLeft(45);
                Robot::driveSystem->MoveRight(50);
            }
            else {
                Robot::driveSystem->MoveLeft(50);
                Robot::driveSystem->MoveRight(50);
            }

            if (Robot::driveSystem->GetEncoderDistance(DriveSystem::kLeft)
                    >= 1.95) {
                Robot::driveSystem->ResetEncoders();
                Robot::driveSystem->ResetYaw();
                autoStage = 4;
                //reset Sensors
            }
            break;
        case 2:
            Robot::driveSystem->MoveLeft(50);
            Robot::driveSystem->MoveRight(-50);

            if (Robot::driveSystem->GetContinuousYaw() >= -30) {
                Robot::driveSystem->ResetEncoders();
                Robot::driveSystem->ResetYaw();
                autoStage = 5;
            }
            break;
        case 3:
            //Motor Stuff
            if (Robot::driveSystem->GetContinuousYaw() > 2.5) {
                Robot::driveSystem->MoveLeft(50);
                Robot::driveSystem->MoveRight(45);
            }
            else if (Robot::driveSystem->GetContinuousYaw() < -2.5) {
                Robot::driveSystem->MoveLeft(45);
                Robot::driveSystem->MoveRight(50);
            }
            else {
                Robot::driveSystem->MoveLeft(50);
                Robot::driveSystem->MoveRight(50);
            }

            if (Robot::driveSystem->GetEncoderDistance(DriveSystem::kLeft)
                    >= 2.53) {
                Robot::driveSystem->ResetEncoders();
                Robot::driveSystem->ResetYaw();
                isFinished = true;
                //reset Sensors
            }
            break;
        default:
            isFinished = true;
    }

    return isFinished;
}

bool AutonomousCommand::Auto3() {
    static bool isFinished = false;

    switch (autoStage) {
        case 0:
            Robot::driveSystem->ResetEncoders();
            Robot::driveSystem->ResetYaw();
            autoStage = 1;
            break;
        case 1:
            //Motor Stuff
            if (Robot::driveSystem->GetContinuousYaw() > 2.5) {
                Robot::driveSystem->MoveLeft(50);
                Robot::driveSystem->MoveRight(45);
            }
            else if (Robot::driveSystem->GetContinuousYaw() < -2.5) {
                Robot::driveSystem->MoveLeft(45);
                Robot::driveSystem->MoveRight(50);
            }
            else {
                Robot::driveSystem->MoveLeft(50);
                Robot::driveSystem->MoveRight(50);
            }

            if (Robot::driveSystem->GetEncoderDistance(DriveSystem::kLeft)
                    >= .731) {
                Robot::driveSystem->ResetEncoders();
                Robot::driveSystem->ResetYaw();
                autoStage = 2;
                //reset Sensors
            }
            break;
        case 2:
            Robot::driveSystem->MoveLeft(-50);
            Robot::driveSystem->MoveRight(50);

            if (Robot::driveSystem->GetContinuousYaw() <= 60) {
                Robot::driveSystem->ResetEncoders();
                Robot::driveSystem->ResetYaw();
                autoStage = 3;
            }
            break;
        case 3:
            //Motor Stuff
            if (Robot::driveSystem->GetContinuousYaw() > 2.5) {
                Robot::driveSystem->MoveLeft(50);
                Robot::driveSystem->MoveRight(45);
            }
            else if (Robot::driveSystem->GetContinuousYaw() < -2.5) {
                Robot::driveSystem->MoveLeft(45);
                Robot::driveSystem->MoveRight(50);
            }
            else {
                Robot::driveSystem->MoveLeft(50);
                Robot::driveSystem->MoveRight(50);
            }

            if (Robot::driveSystem->GetEncoderDistance(DriveSystem::kLeft)
                    >= 1.58) {
                Robot::driveSystem->ResetEncoders();
                Robot::driveSystem->ResetYaw();
                autoStage = 4;
                //reset Sensors
            }
            break;
        case 4:
            Robot::driveSystem->MoveLeft(50);
            Robot::driveSystem->MoveRight(-50);

            if (Robot::driveSystem->GetContinuousYaw() >= -60) {
                Robot::driveSystem->ResetEncoders();
                Robot::driveSystem->ResetYaw();
                autoStage = 5;
            }
            break;
        case 5:
            //Motor Stuff
            if (Robot::driveSystem->GetContinuousYaw() > 2.5) {
                Robot::driveSystem->MoveLeft(50);
                Robot::driveSystem->MoveRight(45);
            }
            else if (Robot::driveSystem->GetContinuousYaw() < -2.5) {
                Robot::driveSystem->MoveLeft(45);
                Robot::driveSystem->MoveRight(50);
            }
            else {
                Robot::driveSystem->MoveLeft(50);
                Robot::driveSystem->MoveRight(50);
            }

            if (Robot::driveSystem->GetEncoderDistance(DriveSystem::kLeft)
                    >= .4572) {
                Robot::driveSystem->ResetEncoders();
                Robot::driveSystem->ResetYaw();
                isFinished = true;
                //reset Sensors
            }
            break;
        default:
            isFinished = true;
    }

    return isFinished;
}

bool AutonomousCommand::Auto4() {
    static bool isFinished = false;

    switch (autoStage) {
        case 0:
            Robot::driveSystem->ResetEncoders();
            Robot::driveSystem->ResetYaw();
            autoStage = 1;
            break;
        case 1:
            Robot::driveSystem->MoveLeft(50);
            Robot::driveSystem->MoveRight(-50);

            if (Robot::driveSystem->GetContinuousYaw() >= -60) {
                Robot::driveSystem->ResetEncoders();
                Robot::driveSystem->ResetYaw();
                autoStage = 2;
            }
            break;
        case 2:
            //Motor Stuff
            if (Robot::driveSystem->GetContinuousYaw() > 2.5) {
                Robot::driveSystem->MoveLeft(50);
                Robot::driveSystem->MoveRight(45);
            }
            else if (Robot::driveSystem->GetContinuousYaw() < -2.5) {
                Robot::driveSystem->MoveLeft(45);
                Robot::driveSystem->MoveRight(50);
            }
            else {
                Robot::driveSystem->MoveLeft(50);
                Robot::driveSystem->MoveRight(50);
            }

            if (Robot::driveSystem->GetEncoderDistance(DriveSystem::kLeft)
                    >= 2.56) {
                Robot::driveSystem->ResetEncoders();
                Robot::driveSystem->ResetYaw();
                autoStage = 3;
                //reset Sensors
            }
            break;
        case 3:
            Robot::driveSystem->MoveLeft(-50);
            Robot::driveSystem->MoveRight(50);

            if (Robot::driveSystem->GetContinuousYaw() <= 90) {
                Robot::driveSystem->ResetEncoders();
                Robot::driveSystem->ResetYaw();
                autoStage = 4;
            }
            break;
        case 4:
            //Motor Stuff
            if (Robot::driveSystem->GetContinuousYaw() > 2.5) {
                Robot::driveSystem->MoveLeft(50);
                Robot::driveSystem->MoveRight(45);
            }
            else if (Robot::driveSystem->GetContinuousYaw() < -2.5) {
                Robot::driveSystem->MoveLeft(45);
                Robot::driveSystem->MoveRight(50);
            }
            else {
                Robot::driveSystem->MoveLeft(50);
                Robot::driveSystem->MoveRight(50);
            }

            if (Robot::driveSystem->GetEncoderDistance(DriveSystem::kLeft)
                    >= 1.31) {
                Robot::driveSystem->ResetEncoders();
                Robot::driveSystem->ResetYaw();
                isFinished = true;
                //reset Sensors
            }
            break;
        default:
            isFinished = true;
    }

    return isFinished;
}

bool AutonomousCommand::Auto5() {
    static bool isFinished = false;

    switch (autoStage) {
        case 0:
            Robot::driveSystem->ResetEncoders();
            Robot::driveSystem->ResetYaw();
            autoStage = 1;
            break;
        case 1:
            //Motor Stuff
            if (Robot::driveSystem->GetContinuousYaw() > 2.5) {
                Robot::driveSystem->MoveLeft(50);
                Robot::driveSystem->MoveRight(45);
            }
            else if (Robot::driveSystem->GetContinuousYaw() < -2.5) {
                Robot::driveSystem->MoveLeft(45);
                Robot::driveSystem->MoveRight(50);
            }
            else {
                Robot::driveSystem->MoveLeft(50);
                Robot::driveSystem->MoveRight(50);
            }

            if (Robot::driveSystem->GetEncoderDistance(DriveSystem::kLeft)
                    >= 2.19) {
                Robot::driveSystem->ResetEncoders();
                Robot::driveSystem->ResetYaw();
                autoStage = 2;
                //reset Sensors
            }
            break;
        case 2:
            Robot::driveSystem->MoveLeft(-50);
            Robot::driveSystem->MoveRight(50);

            if (Robot::driveSystem->GetContinuousYaw() <= 30) {
                Robot::driveSystem->ResetEncoders();
                Robot::driveSystem->ResetYaw();
                autoStage = 3;
            }
            break;
        case 3:
            //Motor Stuff
            if (Robot::driveSystem->GetContinuousYaw() > 2.5) {
                Robot::driveSystem->MoveLeft(50);
                Robot::driveSystem->MoveRight(45);
            }
            else if (Robot::driveSystem->GetContinuousYaw() < -2.5) {
                Robot::driveSystem->MoveLeft(45);
                Robot::driveSystem->MoveRight(50);
            }
            else {
                Robot::driveSystem->MoveLeft(50);
                Robot::driveSystem->MoveRight(50);
            }

            if (Robot::driveSystem->GetEncoderDistance(DriveSystem::kLeft) >= .82) {
                Robot::driveSystem->ResetEncoders();
                Robot::driveSystem->ResetYaw();
                isFinished = true;
            }
            break;
        default:
            isFinished = true;
    }

    return isFinished;
}
