// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "PointTurn.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

PointTurn::PointTurn(double powerPercent, double degreesAntiClockwise): Command() {
    m_powerPercent = powerPercent;
    m_degreesAntiClockwise = degreesAntiClockwise;
        // Use requires() here to declare subsystem dependencies
    // eg. requires(chassis);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::driveSystem.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void PointTurn::Initialize() {
	Robot::driveSystem->ResetYaw();
	if(m_degreesAntiClockwise > 0){
		turningLeft = true;
		Robot::driveSystem->MoveLeft(-m_powerPercent);
		Robot::driveSystem->MoveRight(m_powerPercent);
	}
	else{
		turningLeft = false;
		Robot::driveSystem->MoveLeft(m_powerPercent);
		Robot::driveSystem->MoveRight(-m_powerPercent);
	}
}

// Called repeatedly when this Command is scheduled to run
void PointTurn::Execute() {
if(turningLeft){
		Robot::driveSystem->MoveLeft(-m_powerPercent);
		Robot::driveSystem->MoveRight(m_powerPercent);
	}
	else{
		Robot::driveSystem->MoveLeft(m_powerPercent);
		Robot::driveSystem->MoveRight(-m_powerPercent);
	}
}

// Make this return true when this Command no longer needs to run execute()
bool PointTurn::IsFinished() {
    return (fabs(Robot::driveSystem->GetContinuousYaw()) >= fabs(m_degreesAntiClockwise));
}

// Called once after isFinished returns true
void PointTurn::End() {
	Robot::driveSystem->StopEverything();
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void PointTurn::Interrupted() {
	Robot::driveSystem->StopEverything();
}
