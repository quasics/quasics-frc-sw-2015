// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include "DriveForDistance.h"

#include <Commands/Subsystem.h>
#include "../Robot.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

DriveForDistance::DriveForDistance(double powerPercent, double distanceMeters) :
    Command() {
    m_powerPercent = powerPercent;
    m_distanceMeters = distanceMeters;
    // Use requires() here to declare subsystem dependencies
    // eg. requires(chassis);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    Requires(Robot::driveSystem.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void DriveForDistance::Initialize() {
    Robot::driveSystem->ResetEncoders();
    Robot::driveSystem->MoveLeft(m_powerPercent);
    Robot::driveSystem->MoveRight(m_powerPercent);
}

// Called repeatedly when this Command is scheduled to run
void DriveForDistance::Execute() {
    if (Robot::driveSystem->GetEncoderDistance(DriveSystem::kLeft)
            >= m_distanceMeters) {
        Robot::driveSystem->StopEverything();
    }
    else if (Robot::driveSystem->GetEncoderDistance(DriveSystem::kLeft)
             >= m_distanceMeters - .5) {
        Robot::driveSystem->MoveLeft(m_powerPercent / 2);
        Robot::driveSystem->MoveRight(m_powerPercent / 2);
    }
    else {
        Robot::driveSystem->MoveLeft(m_powerPercent);
        Robot::driveSystem->MoveRight(m_powerPercent);
    }
}

// Make this return true when this Command no longer needs to run execute()
bool DriveForDistance::IsFinished() {
    return (Robot::driveSystem->GetEncoderDistance(DriveSystem::kLeft)
            >= m_distanceMeters);
}

// Called once after isFinished returns true
void DriveForDistance::End() {
    Robot::driveSystem->StopEverything();
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void DriveForDistance::Interrupted() {
    Robot::driveSystem->StopEverything();
}
