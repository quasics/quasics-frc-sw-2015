// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include "StubCommand2.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

StubCommand2::StubCommand2() :
		Command() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::driveSystem.get());
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	isFinished = false;
	firstattempt = kstop;

}
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void StubCommand2::Initialize() {
	isFinished = false;
	firstattempt = kstop;
	Robot::driveSystem->ResetYaw();
	Robot::driveSystem->ResetEncoders();

}

// Called repeatedly when this Command is scheduled to run
void StubCommand2::Execute() {
	if (Robot::driveSystem->GetEncoderDistance(DriveSystem::kLeft) <= 1){
		firstattempt = kforward;

	} else if (Robot::driveSystem->GetContinuousYaw() >= -60) {
		firstattempt = kturnright;
			Robot::driveSystem->ResetEncoders();
	} else if (Robot::driveSystem->GetEncoderDistance(DriveSystem::kLeft) <= 2){
		firstattempt = kforward;
			Robot::driveSystem->ResetYaw();
	} else if (Robot::driveSystem->GetContinuousYaw() <= 60) {
		firstattempt = kturnleft;
			Robot::driveSystem->ResetEncoders();
	}else if (Robot::driveSystem->GetEncoderDistance(DriveSystem::kLeft) <= 1){
		firstattempt = kforward;
			Robot::driveSystem->ResetYaw();
	} else if (Robot::driveSystem->GetContinuousYaw() <= 60) {
		firstattempt = kturnleft;
			Robot::driveSystem->ResetEncoders();
	}else if (Robot::driveSystem->GetEncoderDistance(DriveSystem::kLeft) <= 2){
		firstattempt = kforward;
			Robot::driveSystem->ResetYaw();
	} else if (Robot::driveSystem->GetContinuousYaw() >= -60) {
		firstattempt = kturnright;
			Robot::driveSystem->ResetEncoders();
	}else {
		isFinished = false;
	}


	if (firstattempt == kforward) {
		Robot::driveSystem->MoveLeft(30);
		Robot::driveSystem->MoveRight(30);
	}else if (firstattempt == kturnright) {
		Robot::driveSystem->MoveLeft(40);
		Robot::driveSystem->MoveRight(-40);
	}else if (firstattempt == kturnleft) {
		Robot::driveSystem->MoveLeft(-40);
		Robot::driveSystem->MoveRight(40);
	}else {
		Robot::driveSystem->StopEverything();
	}


}
// Make this return true when this Command no longer needs to run execute()
bool StubCommand2::IsFinished() {
	return isFinished;
}

// Called once after isFinished returns true
void StubCommand2::End() {
	Robot::driveSystem->StopEverything();

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void StubCommand2::Interrupted() {
	Robot::driveSystem->StopEverything();

}
