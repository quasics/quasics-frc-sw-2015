// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include "TankDrive.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

TankDrive::TankDrive() :
		Command() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::driveSystem.get());
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void TankDrive::Initialize() {

}

enum SpeedMode {
	eSlow = 0, eMedium = 1, eFast = 2
};
static const double ScalingFactors[][2] = {
// First is left motor scaling; second is right
		{ 25, 25 },		// slow
		{ 50, 50 },		// medium
		{ 62.5, 62.5 }	// fast
};

const double kMinPowerSetting = 25;
const double kMaxPowerSetting = 62.5;

// Called repeatedly when this Command is scheduled to run
void TankDrive::Execute() {
#define USE_SLIDER_FOR_TRIM
#ifdef USE_SLIDER_FOR_TRIM
	const double leftSliderValue = SmartDashboard::GetNumber("Left Trim", 2.5);
	const double rightSliderValue = SmartDashboard::GetNumber("Right Trim",
			2.5);

	const double leftSliderPercent = leftSliderValue / 5.0;
	const double rightSliderPercent = rightSliderValue / 5.0;

	const double leftPowerAdjustment = kMinPowerSetting
			+ leftSliderPercent * (kMaxPowerSetting - kMinPowerSetting);
	const double rightPowerAdjustment = kMinPowerSetting
			+ rightSliderPercent * (kMaxPowerSetting - kMinPowerSetting);

	SpeedMode mode = eSlow;
	if ((Robot::oi->getPilotStick()->GetRawButton(5)
			|| Robot::oi->getPilotStick()->GetRawButton(6))
			&& !(Robot::oi->getPilotStick()->GetRawButton(7)
					|| Robot::oi->getPilotStick()->GetRawButton(8))) {
		mode = eSlow;
	} else if (!(Robot::oi->getPilotStick()->GetRawButton(5)
			|| Robot::oi->getPilotStick()->GetRawButton(6))
			&& (Robot::oi->getPilotStick()->GetRawButton(7)
					|| Robot::oi->getPilotStick()->GetRawButton(8))) {
		mode = eFast;
	} else {
		mode = eMedium;
	}

	const double leftFactor = ScalingFactors[int(mode)][0];
	const double rightFactor = ScalingFactors[int(mode)][1];

	Robot::driveSystem->MoveLeft(
			double(Robot::oi->getPilotStick()->GetRawAxis(1))
					* leftPowerAdjustment * leftFactor);
	Robot::driveSystem->MoveLeft(
			double(Robot::oi->getPilotStick()->GetRawAxis(1))
					* rightPowerAdjustment * rightFactor);

#else
	// Figure out what mode the driver wants
	SpeedMode mode = eSlow;
	if ((Robot::oi->getPilotStick()->GetRawButton(5)
					|| Robot::oi->getPilotStick()->GetRawButton(6))
			&& !(Robot::oi->getPilotStick()->GetRawButton(7)
					|| Robot::oi->getPilotStick()->GetRawButton(8))) {
		mode = eSlow;
	} else if (!(Robot::oi->getPilotStick()->GetRawButton(5)
					|| Robot::oi->getPilotStick()->GetRawButton(6))
			&& (Robot::oi->getPilotStick()->GetRawButton(7)
					|| Robot::oi->getPilotStick()->GetRawButton(8))) {
		mode = eFast;
	} else {
		mode = eMedium;
	}

	// Set the drive speed, based on joystick position and speed mode.
	const double leftFactor = ScalingFactors[int(mode)][0];
	const double rightFactor = ScalingFactors[int(mode)][1];
	Robot::driveSystem->MoveLeft(
			double(Robot::oi->getPilotStick()->GetRawAxis(1)) * leftFactor);
	Robot::driveSystem->MoveRight(
			double(Robot::oi->getPilotStick()->GetRawAxis(3)) * rightFactor);
#endif
}

// Make this return true when this Command no longer needs to run execute()
bool TankDrive::IsFinished() {
	return (Robot::driveSystem->GetDisplacementX() >= 1);
}

// Called once after isFinished returns true
void TankDrive::End() {
	Robot::driveSystem->StopEverything();
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void TankDrive::Interrupted() {
	Robot::driveSystem->StopEverything();
}
