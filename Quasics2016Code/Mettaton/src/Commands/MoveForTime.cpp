// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "MoveForTime.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

MoveForTime::MoveForTime(double seconds, double power): Command() {
    m_seconds = seconds;
    m_power = power;
        // Use requires() here to declare subsystem dependencies
    // eg. requires(chassis);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::driveBase.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	stopTime = int(m_seconds * 50 +.5); //convert seconds to cycles
	timer = 0; //set cycle counter to 0
}
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void MoveForTime::Initialize() {
	Robot::driveBase->SetLeftPower(m_power); //Set left drive base to specified power
	Robot::driveBase->SetRightPower(m_power); //Set right drive base to specified power
}

// Called repeatedly when this Command is scheduled to run
void MoveForTime::Execute() {
	timer++; //Increment the cycle counter
}

// Make this return true when this Command no longer needs to run execute()
bool MoveForTime::IsFinished() {
    return timer >= stopTime; // return true when at or exceeding the target cycle count
}

// Called once after isFinished returns true
void MoveForTime::End() {
	Robot::driveBase->SetLeftPower(); //When finished stop left drive base motors
	Robot::driveBase->SetRightPower(); //when finished stop right drive base motors
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void MoveForTime::Interrupted() {
	Robot::driveBase->SetLeftPower(); //when interrupted stop left drive base motors
	Robot::driveBase->SetRightPower(); //when interrupted stop right drive base motors
}
