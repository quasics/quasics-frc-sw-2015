// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<SpeedController> RobotMap::driveSystemLeftFront;
std::shared_ptr<SpeedController> RobotMap::driveSystemLeftRear;
std::shared_ptr<SpeedController> RobotMap::driveSystemRightFront;
std::shared_ptr<SpeedController> RobotMap::driveSystemRightRear;
std::shared_ptr<DigitalInput> RobotMap::antonioShooterBasketMax;
std::shared_ptr<DigitalInput> RobotMap::antonioShooterBasketMin;
std::shared_ptr<Servo> RobotMap::antonioShooterBasketServo;
std::shared_ptr<SpeedController> RobotMap::antonioShooterLeftArmMotor;
std::shared_ptr<SpeedController> RobotMap::antonioShooterRightArmMotor;
std::shared_ptr<Encoder> RobotMap::antonioShooterLeftArmEncoder;
std::shared_ptr<Encoder> RobotMap::antonioShooterRightArmEncoder;
std::shared_ptr<SpeedController> RobotMap::antonioShooterLeftShooterMotor;
std::shared_ptr<SpeedController> RobotMap::antonioShooterRightShooterMotor;
std::shared_ptr<Encoder> RobotMap::antonioShooterLeftShooterEncoder;
std::shared_ptr<Encoder> RobotMap::antonioShooterRightShooterencoder;
std::shared_ptr<Relay> RobotMap::mrPlowIntakeMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    LiveWindow *lw = LiveWindow::GetInstance();

    driveSystemLeftFront.reset(new Talon(0));
    lw->AddActuator("DriveSystem", "LeftFront", (Talon&) driveSystemLeftFront);
    
    driveSystemLeftRear.reset(new Talon(1));
    lw->AddActuator("DriveSystem", "LeftRear", (Talon&) driveSystemLeftRear);
    
    driveSystemRightFront.reset(new Talon(2));
    lw->AddActuator("DriveSystem", "RightFront", (Talon&) driveSystemRightFront);
    
    driveSystemRightRear.reset(new Talon(3));
    lw->AddActuator("DriveSystem", "RightRear", (Talon&) driveSystemRightRear);
    
    antonioShooterBasketMax.reset(new DigitalInput(0));
    lw->AddSensor("Antonio Shooter", "Basket Max", antonioShooterBasketMax);
    
    antonioShooterBasketMin.reset(new DigitalInput(1));
    lw->AddSensor("Antonio Shooter", "Basket Min", antonioShooterBasketMin);
    
    antonioShooterBasketServo.reset(new Servo(4));
    lw->AddActuator("Antonio Shooter", "Basket Servo", antonioShooterBasketServo);
    
    antonioShooterLeftArmMotor.reset(new Talon(5));
    lw->AddActuator("Antonio Shooter", "Left Arm Motor", (Talon&) antonioShooterLeftArmMotor);
    
    antonioShooterRightArmMotor.reset(new Talon(6));
    lw->AddActuator("Antonio Shooter", "Right Arm Motor", (Talon&) antonioShooterRightArmMotor);
    
    antonioShooterLeftArmEncoder.reset(new Encoder(2, 3, false, Encoder::k4X));
    lw->AddSensor("Antonio Shooter", "Left Arm Encoder", antonioShooterLeftArmEncoder);
    antonioShooterLeftArmEncoder->SetDistancePerPulse(1.0);
    antonioShooterLeftArmEncoder->SetPIDSourceType(PIDSourceType::kRate);
    antonioShooterRightArmEncoder.reset(new Encoder(4, 5, true, Encoder::k4X));
    lw->AddSensor("Antonio Shooter", "Right Arm Encoder", antonioShooterRightArmEncoder);
    antonioShooterRightArmEncoder->SetDistancePerPulse(1.0);
    antonioShooterRightArmEncoder->SetPIDSourceType(PIDSourceType::kRate);
    antonioShooterLeftShooterMotor.reset(new Talon(7));
    lw->AddActuator("Antonio Shooter", "Left Shooter Motor", (Talon&) antonioShooterLeftShooterMotor);
    
    antonioShooterRightShooterMotor.reset(new Talon(8));
    lw->AddActuator("Antonio Shooter", "Right Shooter Motor", (Talon&) antonioShooterRightShooterMotor);
    
    antonioShooterLeftShooterEncoder.reset(new Encoder(6, 7, false, Encoder::k4X));
    lw->AddSensor("Antonio Shooter", "Left Shooter Encoder", antonioShooterLeftShooterEncoder);
    antonioShooterLeftShooterEncoder->SetDistancePerPulse(1.0);
    antonioShooterLeftShooterEncoder->SetPIDSourceType(PIDSourceType::kRate);
    antonioShooterRightShooterencoder.reset(new Encoder(8, 9, true, Encoder::k4X));
    lw->AddSensor("Antonio Shooter", "Right Shooter encoder", antonioShooterRightShooterencoder);
    antonioShooterRightShooterencoder->SetDistancePerPulse(1.0);
    antonioShooterRightShooterencoder->SetPIDSourceType(PIDSourceType::kRate);
    mrPlowIntakeMotor.reset(new Relay(0));
    lw->AddActuator("Mr Plow", "Intake Motor", mrPlowIntakeMotor);
    


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
