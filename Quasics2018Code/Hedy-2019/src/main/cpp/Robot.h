// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef _ROBOT_H
#define _ROBOT_H

// #define VISION_TRACK_CUBES

#include <WPILib.h>

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "Commands/AutonomousCommand.h"
#include "Subsystems/CubeIntake.h"
#include "Subsystems/CubeManipulation.h"
#include "Subsystems/DriveBase.h"
#include "Subsystems/GyroADXRS.h"
#include "Subsystems/Lighting.h"
#include "Subsystems/Navigation.h"


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

#include "OI.h"

// ENABLE this define, if we want to turn the camera during RobotInit() and enable
// a stream back to the driver station.
// DISABLE it if we don't (e.g., if a vision-tracking subsystem will do camera
// setup.
#define CONFIGURE_CAMERA



class Robot : public frc::TimedRobot {
private:
	struct CameraWrapper {
		CameraWrapper();
		cs::UsbCamera camera;
	};

	frc::Command* leftPlacementCommand = nullptr;
	frc::Command* rightPlacementCommand = nullptr;
	frc::Command* middlePlacementCommand = nullptr;
	std::unique_ptr<frc::Command> autonomousCommand;
	frc::SendableChooser<frc::Command*> chooser;

#ifdef CONFIGURE_CAMERA
	std::unique_ptr<CameraWrapper> cameraWrapper;
#endif	// CONFIGURE_CAMERA

	static Robot* theOneRobot;

public:
	static std::unique_ptr<KatTrainerOI> oi;

	////////////////////////////////////////////////////////////
	// Subsystems
	////////////////////////////////////////////////////////////

	static std::shared_ptr<CommandGroup> teleopCommand;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	static std::shared_ptr<DriveBase> driveBase;
	static std::shared_ptr<Navigation> navigation;
	static std::shared_ptr<CubeManipulation> cubeManipulation;
	static std::shared_ptr<CubeIntake> cubeIntake;
	static std::shared_ptr<Lighting> lighting;
	static std::shared_ptr<GyroADXRS> gyroADXRS;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


	////////////////////////////////////////////////////////////
	// Basic robot functionality
	////////////////////////////////////////////////////////////
	Robot() {
		if (theOneRobot == nullptr) {
			theOneRobot = this;
		}
	}
	~Robot() {
		if (theOneRobot == this) {
			theOneRobot = nullptr;
		}
	}

	void RobotInit() override;
	void DisabledInit() override;
	void DisabledPeriodic() override;
	void AutonomousInit() override;
	void AutonomousPeriodic() override;
	void TeleopInit() override;
	void TeleopPeriodic() override;

	////////////////////////////////////////////////////////////
	// Custom information
	////////////////////////////////////////////////////////////
	enum RobotStartingPosition {
		eStartingInMiddle,
		eStartingOnLeft,
		eStartingOnRight
	};
	static RobotStartingPosition getStartingPosition();

private:
	RobotStartingPosition determineStartingPosition();

};
#endif
