
#include "MoveForDistance.h"

MoveForDistance::MoveForDistance(uint32_t targetInches, double powerLevel): frc::Command() {
	target = targetInches;
	power = powerLevel;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR


        // Use requires() here to declare subsystem dependencies
	Requires (Robot::driveBase.get());
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void MoveForDistance::Initialize() {
	Robot::driveBase->RightEncoderReset();
	Robot::driveBase->LeftEncoderReset();
	Robot::driveBase->SetLeftPower(power);
	Robot::driveBase->SetRightPower(power);
}

// Called repeatedly when this Command is scheduled to run
void MoveForDistance::Execute() {
	if(power > .15 && target - Robot::driveBase->LeftEncoderDistance() <= 24){
		Robot::driveBase->SetLeftPower(.15);
		Robot::driveBase->SetRightPower(.15);
	}
}

// Make this return true when this Command no longer needs to run execute()
bool MoveForDistance::IsFinished() {
	return (fabs(Robot::driveBase->LeftEncoderDistance()) > target
			|| fabs(Robot::driveBase->LeftEncoderDistance()) > target);
}

// Called once after isFinished returns true
void MoveForDistance::End() {
	Robot::driveBase->Stop();

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void MoveForDistance::Interrupted() {
	Robot::driveBase->Stop();
}
