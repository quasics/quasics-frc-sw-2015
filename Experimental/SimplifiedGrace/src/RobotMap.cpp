// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<SpeedController> RobotMap::driveBasefrontRight;
std::shared_ptr<SpeedController> RobotMap::driveBasebackRight;
std::shared_ptr<SpeedController> RobotMap::driveBasefrontLeft;
std::shared_ptr<SpeedController> RobotMap::driveBasebackLeft;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    LiveWindow *lw = LiveWindow::GetInstance();

    driveBasefrontRight.reset(new Jaguar(1));
    lw->AddActuator("Drive Base", "frontRight", std::static_pointer_cast<Jaguar>(driveBasefrontRight));
    
    driveBasebackRight.reset(new Jaguar(0));
    lw->AddActuator("Drive Base", "backRight", std::static_pointer_cast<Jaguar>(driveBasebackRight));
    
    driveBasefrontLeft.reset(new Jaguar(4));
    lw->AddActuator("Drive Base", "frontLeft", std::static_pointer_cast<Jaguar>(driveBasefrontLeft));
    
    driveBasebackLeft.reset(new Jaguar(3));
    lw->AddActuator("Drive Base", "backLeft", std::static_pointer_cast<Jaguar>(driveBasebackLeft));
    


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
