// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "CubeIntake.h"
#include "../RobotMap.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

CubeIntake::CubeIntake() : frc::Subsystem("CubeIntake") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    leftIntakeMotor = RobotMap::cubeIntakeLeftIntakeMotor;
    rightIntakeMotor = RobotMap::cubeIntakeRightIntakeMotor;
    intakeMotors = RobotMap::cubeIntakeIntakeMotors;
    limitSwitch = RobotMap::cubeIntakeLimitSwitch;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void CubeIntake::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void CubeIntake::Periodic() {
    // Put code here to be run every loop

}

// Put methods for controlling this subsystem
// here. Call these from Commands.

void CubeIntake::SetIntakePower(double percent){
	intakeMotors->Set(percent);
}

void CubeIntake::Stop(){
	SetIntakePower(0);
}

bool CubeIntake::IsLimitSwitchTriggered() {
	return (limitSwitch->Get() == 0);		// 0 == closed, 1 == open, according to https://wpilib.screenstepslive.com/s/3120/m/7912/l/599687-using-limit-switches-to-control-behavior
}
