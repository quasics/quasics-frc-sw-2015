// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "PortMappings.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<SpeedController> RobotMap::driveBasefrontRight;
std::shared_ptr<SpeedController> RobotMap::driveBasebackRight;
std::shared_ptr<SpeedController> RobotMap::driveBasefrontLeft;
std::shared_ptr<SpeedController> RobotMap::driveBasebackLeft;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

std::shared_ptr<SpeedController> RobotMap::spareMotor1;
std::shared_ptr<SpeedController> RobotMap::spareMotor2;

std::shared_ptr<SpeedController> RobotMap::createMotor(int port, const char* subsystemName, const char* motorName) {
	std::unique_ptr<Jaguar> motor(new Jaguar(port));
	motor->SetName(subsystemName, motorName);
	return std::shared_ptr<SpeedController>(motor.release());
}

void RobotMap::init() {
    driveBasefrontRight = createMotor(FRONT_RIGHT_MOTOR_PORT, "Drive Base", "frontRight");
    driveBasebackRight = createMotor(BACK_RIGHT_MOTOR_PORT, "Drive Base", "backRight");
    driveBasefrontLeft = createMotor(FRONT_LEFT_MOTOR_PORT, "Drive Base", "frontLeft");
    driveBasebackLeft = createMotor(BACK_LEFT_MOTOR_PORT, "Drive Base", "backLeft");

    spareMotor1 = createMotor(SPARE_MOTOR_1_PORT, "Hardware Test", "spareMotor1");
    spareMotor2 = createMotor(SPARE_MOTOR_2_PORT, "Hardware Test", "spareMotor2");
}
