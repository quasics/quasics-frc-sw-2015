// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<SpeedController> RobotMap::intakeArmLeftArm;
std::shared_ptr<SpeedController> RobotMap::intakeArmRightArm;
std::shared_ptr<Encoder> RobotMap::intakeArmLeftEncoder;
std::shared_ptr<Encoder> RobotMap::intakeArmRightEncoder;
std::shared_ptr<SpeedController> RobotMap::intakeShooterLeftIntakeWheel;
std::shared_ptr<SpeedController> RobotMap::intakeShooterRightIntakeWheel;
std::shared_ptr<DoubleSolenoid> RobotMap::intakeShooterPusher;
std::shared_ptr<SpeedController> RobotMap::driveTrainFrontLeft;
std::shared_ptr<SpeedController> RobotMap::driveTrainBackLeft;
std::shared_ptr<SpeedController> RobotMap::driveTrainFrontRight;
std::shared_ptr<SpeedController> RobotMap::driveTrainBackRight;
std::shared_ptr<Encoder> RobotMap::driveTrainLeftEncoder;
std::shared_ptr<Encoder> RobotMap::driveTrainRightEncoder;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    LiveWindow *lw = LiveWindow::GetInstance();

    intakeArmLeftArm.reset(new Spark(6));
    lw->AddActuator("IntakeArm", "LeftArm", (Spark&) intakeArmLeftArm);
    
    intakeArmRightArm.reset(new Spark(7));
    lw->AddActuator("IntakeArm", "RightArm", (Spark&) intakeArmRightArm);
    
    intakeArmLeftEncoder.reset(new Encoder(4, 5, false, Encoder::k4X));
    lw->AddSensor("IntakeArm", "LeftEncoder", intakeArmLeftEncoder);
    intakeArmLeftEncoder->SetDistancePerPulse(1.0);
    intakeArmLeftEncoder->SetPIDSourceType(PIDSourceType::kRate);
    intakeArmRightEncoder.reset(new Encoder(6, 7, true, Encoder::k4X));
    lw->AddSensor("IntakeArm", "RightEncoder", intakeArmRightEncoder);
    intakeArmRightEncoder->SetDistancePerPulse(1.0);
    intakeArmRightEncoder->SetPIDSourceType(PIDSourceType::kRate);
    intakeShooterLeftIntakeWheel.reset(new Victor(4));
    lw->AddActuator("Intake Shooter", "LeftIntakeWheel", (Victor&) intakeShooterLeftIntakeWheel);
    
    intakeShooterRightIntakeWheel.reset(new Victor(5));
    lw->AddActuator("Intake Shooter", "RightIntakeWheel", (Victor&) intakeShooterRightIntakeWheel);
    
    intakeShooterPusher.reset(new DoubleSolenoid(1, 0, 1));
    lw->AddActuator("Intake Shooter", "Pusher", intakeShooterPusher);
    
    driveTrainFrontLeft.reset(new Talon(0));
    lw->AddActuator("DriveTrain", "FrontLeft", (Talon&) driveTrainFrontLeft);
    
    driveTrainBackLeft.reset(new Talon(1));
    lw->AddActuator("DriveTrain", "BackLeft", (Talon&) driveTrainBackLeft);
    
    driveTrainFrontRight.reset(new Talon(2));
    lw->AddActuator("DriveTrain", "FrontRight", (Talon&) driveTrainFrontRight);
    
    driveTrainBackRight.reset(new Talon(3));
    lw->AddActuator("DriveTrain", "BackRight", (Talon&) driveTrainBackRight);
    
    driveTrainLeftEncoder.reset(new Encoder(0, 1, true, Encoder::k4X));
    lw->AddSensor("DriveTrain", "LeftEncoder", driveTrainLeftEncoder);
    driveTrainLeftEncoder->SetDistancePerPulse(4.318E-4);
    driveTrainLeftEncoder->SetPIDSourceType(PIDSourceType::kRate);
    driveTrainRightEncoder.reset(new Encoder(2, 3, false, Encoder::k4X));
    lw->AddSensor("DriveTrain", "RightEncoder", driveTrainRightEncoder);
    driveTrainRightEncoder->SetDistancePerPulse(4.318E-4);
    driveTrainRightEncoder->SetPIDSourceType(PIDSourceType::kRate);


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
