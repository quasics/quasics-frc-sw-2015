// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include "DriveSystem.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

DriveSystem::DriveSystem() :

		Subsystem("DriveSystem") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	leftFront = RobotMap::driveSystemLeftFront;
	leftRear = RobotMap::driveSystemLeftRear;
	rightFront = RobotMap::driveSystemRightFront;
	rightRear = RobotMap::driveSystemRightRear;
	robotDrive41 = RobotMap::driveSystemRobotDrive41;
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	isLeftForward = false;
	isRightForward = false;
	leftPower = 0;
	rightPower = 0;
	try {
		/* Communicate w/navX-MXP via the MXP SPI Bus.                                       */
		/* Alternatively:  I2C::Port::kMXP, SerialPort::Port::kMXP or SerialPort::Port::kUSB */
		/* See http://navx-mxp.kauailabs.com/guidance/selecting-an-interface/ for details.   */
		navx.reset(new AHRS(SPI::Port::kMXP));
	} catch (const std::exception& ex) {
		std::string err_string = "Error instantiating navX-MXP:  ";
		err_string += ex.what();
		DriverStation::ReportError(err_string.c_str());
	}
}

void DriveSystem::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	// SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}
void DriveSystem::MoveLeft(bool isForward, double percentPower) {
	isLeftForward = isForward;
	leftPower = fabs(percentPower);
	double leftPowerSetting;
	if (isLeftForward) {
		leftPowerSetting = leftPower / 100;
	} else {
		leftPowerSetting = leftPower / -100;
	}
	leftFront->Set(leftPowerSetting);
	leftRear->Set(leftPowerSetting);
}

void DriveSystem::MoveRight(bool isForward, double percentPower) {
	isRightForward = isForward;
	rightPower = fabs(percentPower);
	double rightPowerSetting;
	if (isRightForward) {
		rightPowerSetting = rightPower / 100;
	} else {
		rightPowerSetting = rightPower / -100;
	}
	rightFront->Set(rightPowerSetting);
	rightRear->Set(rightPowerSetting);
}

void DriveSystem::StopEverything() {
	leftPower = 0;
	rightPower = 0;
	isLeftForward = false;
	isRightForward = false;
	leftFront->Set(0);
	leftRear->Set(0);
	rightFront->Set(0);
	rightRear->Set(0);
}

double DriveSystem::GetPowerLeft() {
	return leftPower;
}

double DriveSystem::GetPowerRight() {
	return rightPower;
}

bool DriveSystem::IsLeftForward() {
	return isLeftForward;
}

bool DriveSystem::IsRightForward() {
	return isRightForward;

}

// Put methods for controlling this subsystem
// here. Call these from Commands.

