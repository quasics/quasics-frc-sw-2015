// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

#include "EncoderVariables.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<frc::SpeedController> RobotMap::climberWinchMotor;
std::shared_ptr<frc::SpeedController> RobotMap::climberScissorLiftMotor;
std::shared_ptr<frc::Servo> RobotMap::rampRightLinearActuatorServo;
std::shared_ptr<frc::Solenoid> RobotMap::rampLeftRamp1;
std::shared_ptr<frc::Solenoid> RobotMap::rampLeftRamp2;
std::shared_ptr<frc::Solenoid> RobotMap::rampRightRamp1;
std::shared_ptr<frc::Solenoid> RobotMap::rampRightRamp2;
std::shared_ptr<frc::Servo> RobotMap::rampLeftLinearActuatorServo;
std::shared_ptr<frc::Encoder> RobotMap::driveBaseLeftEncoder;
std::shared_ptr<frc::Encoder> RobotMap::driveBaseRightEncoder;
std::shared_ptr<frc::SpeedController> RobotMap::driveBaseleftRearMotor;
std::shared_ptr<frc::SpeedController> RobotMap::driveBaseleftFrontMotor;
std::shared_ptr<frc::SpeedControllerGroup> RobotMap::driveBaseLeftMotors;
std::shared_ptr<frc::SpeedController> RobotMap::driveBaserightFrontMotor;
std::shared_ptr<frc::SpeedController> RobotMap::driveBaserightRearMotor;
std::shared_ptr<frc::SpeedControllerGroup> RobotMap::driveBaseRightMotors;
std::shared_ptr<frc::DigitalInput> RobotMap::cubeManipulationLimitSwitch;
std::shared_ptr<frc::SpeedController> RobotMap::cubeManipulationleftShoulderMotor;
std::shared_ptr<frc::SpeedController> RobotMap::cubeManipulationrightShoulderMotor;
std::shared_ptr<frc::SpeedControllerGroup> RobotMap::cubeManipulationShoulderMotors;
std::shared_ptr<frc::SpeedController> RobotMap::cubeManipulationleftIntakeMotor;
std::shared_ptr<frc::SpeedController> RobotMap::cubeManipulationrightIntakeMotor;
std::shared_ptr<frc::SpeedControllerGroup> RobotMap::cubeManipulationIntakeMotors;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

// These are "helper functions", intended to work around some problems in the code
// that Robot Builder currently generates.  (It's still generating code like it
// did for 2017 and earlier, but things are different in 2018.)
template <class Controller>
inline std::shared_ptr<Controller> createMotor(int port, const char* const subsystem, const char* const name) {
	std::shared_ptr<Controller> const motor(new Controller(port));
	motor->SetSubsystem(subsystem);
	motor->SetName(name);
	return motor;
}
inline std::shared_ptr<frc::SpeedControllerGroup> createSpeedControllerGroup(frc::SpeedController& motor1, frc::SpeedController& motor2, const char* const subsystem, const char* const name) {
	std::shared_ptr<frc::SpeedControllerGroup> speedControllerGroup(new frc::SpeedControllerGroup(motor1, motor2));
	speedControllerGroup->SetSubsystem(subsystem);
	speedControllerGroup->SetName(name);
	return speedControllerGroup;
}
inline std::shared_ptr<frc::Encoder> createEncoder(
		int channelA, int channelB,
		bool reverseDirection, double distancePerPulse,
		frc::PIDSourceType sourceType,
		const char* const subsystem, const char* const name)
{
	std::shared_ptr<frc::Encoder> encoder(new frc::Encoder(channelA, channelB, reverseDirection));
	encoder->SetDistancePerPulse(distancePerPulse);
	encoder->SetPIDSourceType(sourceType);
	encoder->SetSubsystem(subsystem);
	encoder->SetName(name);
	return encoder;
}

// #define USE_ROBOT_BUILDER_INIT

void RobotMap::init() {
// #define USE_ROBOT_BUILDER_INIT
#if !defined(USE_ROBOT_BUILDER_INIT)
	// NOTE: This code needs to be kept in sync with the stuff in the "#else" clause, below.
	// This version works around some outdated code produced by Robot Builder 2018, but if
	// we ever make updates in RobotBuilder and re-export the C++ code, it will be out of
	// sync with those changes, and will have to be updated manually.
	//
	// (On the other hand, this version of the code won't produce warnings when compiled,
	// which means that it's easier to see what's *really* wrong when the compiler finds
	// something funky.)

	driveBaseLeftEncoder = createEncoder(
			0, 1, true, DRIVE_TRAIN_INCHES_PER_TICK,
			frc::PIDSourceType::kRate, "DriveBase", "Left Encoder");
	driveBaseRightEncoder = createEncoder(
			2, 3, false, DRIVE_TRAIN_INCHES_PER_TICK,
			frc::PIDSourceType::kRate, "DriveBase", "Right Encoder");

	driveBaserightFrontMotor = createMotor<frc::Jaguar>(0, "Drive Base", "rightFrontMotor");
	driveBaserightRearMotor = createMotor<frc::Jaguar>(1, "Drive Base", "rightRearMotor");
    driveBaseleftFrontMotor = createMotor<frc::Jaguar>(2, "Drive Base", "leftFrontMotor");
    driveBaseleftRearMotor = createMotor<frc::Jaguar>(3, "Drive Base", "leftRearMotor");

    driveBaseLeftMotors = createSpeedControllerGroup(
    		*driveBaseleftFrontMotor, *driveBaseleftRearMotor,
			"DriveBase", "LeftDriveMotors");
    driveBaseRightMotors = createSpeedControllerGroup(
    		*driveBaserightFrontMotor, *driveBaserightRearMotor,
			"DriveBase", "RightDriveMotors");

    cubeManipulationleftShoulderMotor = createMotor<frc::Spark>(4, "CubeManipulation", "leftShoulderMotor");
    cubeManipulationrightShoulderMotor = createMotor<frc::Spark>(5, "CubeManipulation", "rightShoulderMotor");
    cubeManipulationleftIntakeMotor = createMotor<frc::Spark>(6, "CubeManipulation", "leftIntakeMotor");
    cubeManipulationrightIntakeMotor = createMotor<frc::Spark>(7, "CubeManipulation", "rightIntakeMotor");

    cubeManipulationShoulderMotors = createSpeedControllerGroup(
    		*cubeManipulationleftShoulderMotor, *cubeManipulationrightShoulderMotor,
			"CubeManipulation", "ShoulderMotors");
    cubeManipulationIntakeMotors = createSpeedControllerGroup(
    		*cubeManipulationleftIntakeMotor, *cubeManipulationrightIntakeMotor,
			"CubeManipulation", "IntakeMotors");
#else
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    frc::LiveWindow *lw = frc::LiveWindow::GetInstance();

    climberWinchMotor.reset(new frc::Spark(8));
    lw->AddActuator("Climber", "Winch Motor", std::static_pointer_cast<frc::Spark>(climberWinchMotor));
    
    climberScissorLiftMotor.reset(new frc::Spark(9));
    lw->AddActuator("Climber", "Scissor Lift Motor", std::static_pointer_cast<frc::Spark>(climberScissorLiftMotor));
    
    rampRightLinearActuatorServo.reset(new frc::Servo(10));
    lw->AddActuator("Ramp", "RightLinearActuatorServo", rampRightLinearActuatorServo);
    
    rampLeftRamp1.reset(new frc::Solenoid(0, 0));
    lw->AddActuator("Ramp", "Left Ramp 1", rampLeftRamp1);
    
    rampLeftRamp2.reset(new frc::Solenoid(0, 1));
    lw->AddActuator("Ramp", "Left Ramp 2", rampLeftRamp2);
    
    rampRightRamp1.reset(new frc::Solenoid(0, 2));
    lw->AddActuator("Ramp", "Right Ramp 1", rampRightRamp1);
    
    rampRightRamp2.reset(new frc::Solenoid(0, 3));
    lw->AddActuator("Ramp", "Right Ramp 2", rampRightRamp2);
    
    rampLeftLinearActuatorServo.reset(new frc::Servo(11));
    lw->AddActuator("Ramp", "LeftLinearActuatorServo", rampLeftLinearActuatorServo);
    
    driveBaseLeftEncoder.reset(new frc::Encoder(0, 1, true, frc::Encoder::k4X));
    lw->AddSensor("DriveBase", "Left Encoder", driveBaseLeftEncoder);
    driveBaseLeftEncoder->SetDistancePerPulse(0.05235987755);
    driveBaseLeftEncoder->SetPIDSourceType(frc::PIDSourceType::kRate);
    driveBaseRightEncoder.reset(new frc::Encoder(2, 3, false, frc::Encoder::k4X));
    lw->AddSensor("DriveBase", "Right Encoder", driveBaseRightEncoder);
    driveBaseRightEncoder->SetDistancePerPulse(0.05235987755);
    driveBaseRightEncoder->SetPIDSourceType(frc::PIDSourceType::kRate);
    driveBaseleftRearMotor.reset(new frc::PWMVictorSPX(3));
    lw->AddActuator("DriveBase", "leftRearMotor", std::static_pointer_cast<frc::PWMVictorSPX>(driveBaseleftRearMotor));
    
    driveBaseleftFrontMotor.reset(new frc::PWMVictorSPX(2));
    lw->AddActuator("DriveBase", "leftFrontMotor", std::static_pointer_cast<frc::PWMVictorSPX>(driveBaseleftFrontMotor));
    
    driveBaseLeftMotors = std::make_shared<frc::SpeedControllerGroup>(*driveBaseleftFrontMotor, *driveBaseleftRearMotor  );
    lw->AddActuator("DriveBase", "LeftMotors", driveBaseLeftMotors);
    
    driveBaserightFrontMotor.reset(new frc::PWMVictorSPX(0));
    lw->AddActuator("DriveBase", "rightFrontMotor", std::static_pointer_cast<frc::PWMVictorSPX>(driveBaserightFrontMotor));
    
    driveBaserightRearMotor.reset(new frc::PWMVictorSPX(1));
    lw->AddActuator("DriveBase", "rightRearMotor", std::static_pointer_cast<frc::PWMVictorSPX>(driveBaserightRearMotor));
    
    driveBaseRightMotors = std::make_shared<frc::SpeedControllerGroup>(*driveBaserightFrontMotor, *driveBaserightRearMotor  );
    lw->AddActuator("DriveBase", "RightMotors", driveBaseRightMotors);
    
    cubeManipulationLimitSwitch.reset(new frc::DigitalInput(4));
    lw->AddSensor("CubeManipulation", "Limit Switch", cubeManipulationLimitSwitch);
    
    cubeManipulationleftShoulderMotor.reset(new frc::Spark(4));
    lw->AddActuator("CubeManipulation", "leftShoulderMotor", std::static_pointer_cast<frc::Spark>(cubeManipulationleftShoulderMotor));
    
    cubeManipulationrightShoulderMotor.reset(new frc::Spark(5));
    lw->AddActuator("CubeManipulation", "rightShoulderMotor", std::static_pointer_cast<frc::Spark>(cubeManipulationrightShoulderMotor));
    
    cubeManipulationShoulderMotors = std::make_shared<frc::SpeedControllerGroup>(*cubeManipulationleftShoulderMotor, *cubeManipulationrightShoulderMotor  );
    lw->AddActuator("CubeManipulation", "ShoulderMotors", cubeManipulationShoulderMotors);
    
    cubeManipulationleftIntakeMotor.reset(new frc::Spark(6));
    lw->AddActuator("CubeManipulation", "leftIntakeMotor", std::static_pointer_cast<frc::Spark>(cubeManipulationleftIntakeMotor));
    
    cubeManipulationrightIntakeMotor.reset(new frc::Spark(7));
    lw->AddActuator("CubeManipulation", "rightIntakeMotor", std::static_pointer_cast<frc::Spark>(cubeManipulationrightIntakeMotor));
    
    cubeManipulationIntakeMotors = std::make_shared<frc::SpeedControllerGroup>(*cubeManipulationleftIntakeMotor, *cubeManipulationrightIntakeMotor  );
    lw->AddActuator("CubeManipulation", "IntakeMotors", cubeManipulationIntakeMotors);
    


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
#endif

    // NOTE: This *should* be done by the Robot Builder code (and duplicated in the
    // manual init above).  However, it looks like there's a bug in Robot Builder.
    // (Shocking, I know.... :-)
    cubeManipulationrightIntakeMotor->SetInverted(true);
}
