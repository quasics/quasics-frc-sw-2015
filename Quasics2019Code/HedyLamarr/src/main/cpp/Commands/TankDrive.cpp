// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include "Commands/TankDrive.h"

constexpr double kSpeedMultiplierForTurtleMode = 0.4;
constexpr double kSpeedMultiplierForNormalMode = 1.0;
constexpr double kSpeedMultiplierForFullSpeedMode = .6;


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

TankDrive::TankDrive(): frc::Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::driveBase.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void TankDrive::Initialize() {
}

// Called repeatedly when this Command is scheduled to run
void TankDrive::Execute() {
    // Grab the inputs that we'll be working with from the OI.
    const double LeftTankSpeed = Robot::oi->getLeftTankSpeed();
    const double RightTankSpeed = Robot::oi->getRightTankSpeed();
    const bool isTurtleSignalledNow = Robot::oi->OI::isTurtleTriggerDown();

    // See if "turtle mode" is being toggled.
    if (isTurtleSignalledNow && !wasTurtleSignalledLastTime) {
        // They just started pressing the trigger on the joystick: toggle
        // turtle mode on/off.
        isTurtleModeOn = !isTurtleModeOn;
    }

    // Logic for selecting the multiplier to use in adjusting the
    // readings from the drive stick.
    double speedMultiplier = kSpeedMultiplierForNormalMode;
    if (isTurtleModeOn){
        speedMultiplier = kSpeedMultiplierForTurtleMode;
    }
    else if (Robot::oi->OI::isFullSpeedTriggered()){
        speedMultiplier = kSpeedMultiplierForFullSpeedMode;
    }

    // Set the speed using the drive stick values and the active speed multiplier.
    if(Robot::oi->OI::isSwitchDriveToggled()) {
        Robot::driveBase->SetMotorSpeed(
            RightTankSpeed * -speedMultiplier,
            LeftTankSpeed * speedMultiplier);
    } else {
        Robot::driveBase->SetMotorSpeed(
            LeftTankSpeed * speedMultiplier,
            RightTankSpeed *-speedMultiplier);
    }


    // Remember the state for the "turtle trigger", for the next time around
    wasTurtleSignalledLastTime = isTurtleSignalledNow;
}

// Make this return true when this Command no longer needs to run execute()
bool TankDrive::IsFinished() {
  return false;
}

// Called once after isFinished returns true
void TankDrive::End() {
  Robot::driveBase->Stop();
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void TankDrive::Interrupted() {
  End();
}
