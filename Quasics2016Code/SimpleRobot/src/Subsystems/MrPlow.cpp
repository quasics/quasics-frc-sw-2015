// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include "MrPlow.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

MrPlow::MrPlow() :
		Subsystem("MrPlow") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	intakeBar = RobotMap::mrPlowIntakeBar;
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	direction = kNone;
	activePower = 50;
}

void MrPlow::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	// SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

// Put methods for controlling this subsystem
// here. Call these from Commands.

void MrPlow::SetIntake(IntakeDirection whichDirection) {
	switch (whichDirection) {
	case (kIntake):
		intakeBar->Set(-activePower/2);
		direction = kIntake;
		break;
	case (kOutput):
		intakeBar->Set(activePower);
		direction = kOutput;
		break;
	default:
		intakeBar->Set(0);
		direction = kNone;
	}
}

void MrPlow::StopIntake() {
	intakeBar->Set(0);
	direction = kNone;
}

void MrPlow::SetActivePower(double powerPercent){
	activePower = powerPercent/100;
}


MrPlow::IntakeDirection MrPlow::WhichDirection() {
	return direction;
}

double MrPlow::GetPowerPercent(){
	return activePower/100;
}
