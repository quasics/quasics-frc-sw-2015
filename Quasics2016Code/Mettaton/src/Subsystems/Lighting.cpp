// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include "Lighting.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Lighting::Lighting() :
		Subsystem("Lighting") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	serialPort = RobotMap::lightingSerialPort;
}

void Lighting::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	// SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

// Put methods for controlling this subsystem
// here. Call these from Commands.

void Lighting::SetColor(Colors color) {
	std::string serialText = ";";
	switch (color) {
	case kRed:
		serialText = "Red;";
		break;
	case kBlue:
		serialText = "Blue;";
		break;
	case kWhite:
		serialText = "White;";
		break;
	default:
		serialText = "Green;";
	}

	serialPort->Write(serialText, serialText.length());
}
void Lighting::SetDynamic(Dynamics dynamic) {
	//kBreathing, kOn, kBlinking, kOff
	std::string serialText = ";";
	switch (dynamic){
	case kBreathing:
		serialText = "Breathing;";
		break;
	case kBlinking:
		serialText = "Blink;";
		break;
	case kOff:
		serialText = "Off;";
		break;
	default:
		serialText = "Solid;";
		break;
	}
	serialPort->Write(serialText, serialText.length());
}
