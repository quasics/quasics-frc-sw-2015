// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "AutonomousCommand.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

AutonomousCommand::AutonomousCommand(): frc::Command() {
        // Use requires() here to declare subsystem dependencies
	Requires (Robot::driveBase.get());
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void AutonomousCommand::Initialize() {
	Robot::driveBase->SetLeftPower(power);
	Robot::driveBase->SetRightPower(power);
	int count = 0;
	SetTimeout(secondsToRun);
	// interpret FMS signal to determine which side the switch is on
}

// Called repeatedly when this Command is scheduled to run
void AutonomousCommand::Execute() {
// turn to face our side of the switch
	 while(count <= 10){
		 Robot::driveBase->SetLeftPower(.4);
		 Robot::driveBase->SetRightPower(.4);
		 count = count + 1;
	 }
	 if(count >= 10){
		 Robot::driveBase->Stop();

	 }
	 //activate cube manipulator to deposit cube in switch
}

// Make this return true when this Command no longer needs to run execute()
bool AutonomousCommand::IsFinished() {
    return count >= 10;
}

// Called once after isFinished returns true
void AutonomousCommand::End() {
	Robot::driveBase->Stop();
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void AutonomousCommand::Interrupted() {
	End();
}
