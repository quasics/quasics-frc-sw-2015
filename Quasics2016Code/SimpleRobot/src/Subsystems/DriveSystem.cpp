// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include "DriveSystem.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

DriveSystem::DriveSystem() :

		Subsystem("DriveSystem") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	speedController1 = RobotMap::driveSystemSpeedController1;
	speedController2 = RobotMap::driveSystemSpeedController2;
	speedController3 = RobotMap::driveSystemSpeedController3;
	speedController4 = RobotMap::driveSystemSpeedController4;
	robotDrive41 = RobotMap::driveSystemRobotDrive41;
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	isLeftForward = false;
	isRightForward = false;
	leftPower = 0;
	rightPower = 0;
}

void DriveSystem::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	// SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}
void DriveSystem::MoveLeft(bool isForward, double percentPower){
	isLeftForward = isForward;
	leftPower = fabs(percentPower);
	double leftPowerSetting;
	if (isLeftForward){
		leftPowerSetting = leftPower/100;
	}
	else{
		leftPowerSetting = leftPower/-100;
	}
	speedController1->Set(leftPowerSetting);
	speedController2->Set(leftPowerSetting);
}

void DriveSystem::MoveRight(bool isForward, double percentPower) {
	isRightForward = isForward;
	rightPower = fabs(percentPower);
	double rightPowerSetting;
	if (isRightForward) {
		rightPowerSetting = rightPower / 100;
	} else {
		rightPowerSetting = rightPower / -100;
	}
	speedController3->Set(rightPowerSetting);
	speedController4->Set(rightPowerSetting);
}

void DriveSystem::StopEverything (){
	leftPower = 0;
	rightPower = 0;
	isLeftForward = false;
	isRightForward = false;
	speedController1->Set(0);
	speedController2->Set(0);
	speedController3->Set(0);
	speedController4->Set(0);
}

double DriveSystem::GetPowerLeft(){
	return leftPower;
}

double DriveSystem::GetPowerRight() {
	return rightPower;
}

bool DriveSystem::IsLeftForward(){
	return isLeftForward;
}

bool DriveSystem::IsRightForward() {
	return isRightForward;

}

// Put methods for controlling this subsystem
// here. Call these from Commands.

