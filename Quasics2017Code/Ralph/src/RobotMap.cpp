// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include "RobotMap.h"

#include <LiveWindow/LiveWindow.h>
#include "RobotVariables.h"

std::shared_ptr<Encoder> RobotMap::driveTrainLeftEncoder;
std::shared_ptr<SpeedController> RobotMap::driveTrainFrontLeft;
std::shared_ptr<SpeedController> RobotMap::driveTrainBackLeft;
std::shared_ptr<Encoder> RobotMap::driveTrainRightEncoder;
std::shared_ptr<SpeedController> RobotMap::driveTrainFrontRight;
std::shared_ptr<SpeedController> RobotMap::driveTrainBackRight;
std::shared_ptr<SpeedController> RobotMap::climberMotor;

std::shared_ptr<Servo> RobotMap::gearServo;
std::shared_ptr<Servo> RobotMap::gearServoKicker;

//------------------------Wiring Info--------------------------------------------------------------
//------------------------Sensors------------------------------------------------------------------
#define LEFT_ENCODER_A_CHANNEL		0
#define LEFT_ENCODER_B_CHANNEL		1
#define RIGHT_ENCODER_A_CHANNEL		2
#define RIGHT_ENCODER_B_CHANNEL		3
//------------------------Motors-------------------------------------------------------------------
#define LEFT_FRONT_MOTOR_CHANNEL	0
#define LEFT_BACK_MOTOR_CHANNEL		1
#define RIGHT_FRONT_MOTOR_CHANNEL	2
#define RIGHT_BACK_MOTOR_CHANNEL	3
#define CLIMBER_MOTOR_CHANNEL		8
//------------------------Other Actuators----------------------------------------------------------
#define GEAR_SERVO_CHANNEL			5
#define KICKER_SERVO_CHANNEL		9
//------------------------End Of Wiring Info ------------------------------------------------------

void RobotMap::init() {
	LiveWindow *lw = LiveWindow::GetInstance();

	// Drive train hardware set-up
	//Encoders
	driveTrainLeftEncoder.reset(new Encoder(0, 1,
	false));
	driveTrainRightEncoder.reset(new Encoder(2, 3,
	true));
	driveTrainLeftEncoder->SetDistancePerPulse(inchesPerTick);
	driveTrainRightEncoder->SetDistancePerPulse(inchesPerTick);
	driveTrainLeftEncoder->SetPIDSourceType(PIDSourceType::kRate);
	driveTrainRightEncoder->SetPIDSourceType(PIDSourceType::kRate);

	//Drive Motors
#ifdef Practice_Bot
	driveTrainFrontLeft.reset(new Jaguar(LEFT_FRONT_MOTOR_CHANNEL));
	driveTrainBackLeft.reset(new Jaguar(LEFT_BACK_MOTOR_CHANNEL));
	driveTrainFrontRight.reset(new Jaguar(RIGHT_FRONT_MOTOR_CHANNEL));
	driveTrainBackRight.reset(new Jaguar(RIGHT_BACK_MOTOR_CHANNEL));
	driveTrainFrontLeft->SetInverted(true);
	driveTrainBackLeft->SetInverted(true);
	lw->AddActuator("DriveTrain", "FrontLeft",
			std::static_pointer_cast<Jaguar>(driveTrainFrontLeft));
	lw->AddActuator("DriveTrain", "BackLeft",
			std::static_pointer_cast<Jaguar>(driveTrainBackLeft));
	lw->AddActuator("DriveTrain", "FrontRight",
			std::static_pointer_cast<Jaguar>(driveTrainFrontRight));
	lw->AddActuator("DriveTrain", "BackRight",
			std::static_pointer_cast<Jaguar>(driveTrainBackRight));
#else
	driveTrainFrontLeft.reset(new Talon(LEFT_FRONT_MOTOR_CHANNEL));
	driveTrainBackLeft.reset(new Talon (LEFT_BACK_MOTOR_CHANNEL));
	driveTrainFrontRight.reset(new Talon(RIGHT_FRONT_MOTOR_CHANNEL));
	driveTrainBackRight.reset(new Talon(RIGHT_BACK_MOTOR_CHANNEL));
	driveTrainFrontLeft->SetInverted(true);
	driveTrainBackLeft->SetInverted(true);
	lw->AddActuator("DriveTrain", "FrontLeft",
			std::static_pointer_cast<Talon>(driveTrainFrontLeft));
	lw->AddActuator("DriveTrain", "BackLeft",
			std::static_pointer_cast<Talon>(driveTrainBackLeft));
	lw->AddActuator("DriveTrain", "FrontRight",
			std::static_pointer_cast<Talon>(driveTrainFrontRight));
	lw->AddActuator("DriveTrain", "BackRight",
			std::static_pointer_cast<Talon>(driveTrainBackRight));
#endif

	// Gear-handling hardware set-up
	gearServo.reset(new Servo(GEAR_SERVO_CHANNEL));

	//Gear Kicker hardware setup
	gearServoKicker.reset(new Servo(KICKER_SERVO_CHANNEL));

	//Climber
	climberMotor.reset(new Spark(CLIMBER_MOTOR_CHANNEL));

}
