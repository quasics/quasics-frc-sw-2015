// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

////////////////////////////////////////////
// Conditional compilation flags

//
// Control behavior in autonomous mode
//

// #define USE_SELECTED_AUTO_CMD
// #define DISABLE_AUTO_MODE

//
// Control lighting system.
//

// #define DISABLE_LIGHTING
#define USE_LIVE_LIGHTING

//
// Control lighting system.
//

#define ENABLE_USB_CAMERA

////////////////////////////////////////////
// Include files

#include "Robot.h"

#include <cassert>

#include "RobotMap.h"
#include "Commands/AutonomousCommand.h"
#include "Commands/SpyBoxAutonmous.h"
#include "Commands/TankDrive.h"
#include "Commands/DashboardUpdater.h"
#include "Commands/TimedMove.h"

#if defined(DISABLE_LIGHTING)
    #include "Lighting/LightingControl.h"
    typedef NullLightingControl LightingController;
#elif defined(USE_LIVE_LIGHTING)
    #include "Lighting/SerialLightingControl.h"
    typedef SerialLightingControl LightingController;
#else
    #include "Lighting/SimulatedLightingControl.h"
    typedef SerialLightingControl LightingController;
#endif  // DISABLE_LIGHTING

////////////////////////////////////////////
// "Real Code...."

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
std::shared_ptr<DriveSystem> Robot::driveSystem;
std::shared_ptr<Intake> Robot::intake;
std::shared_ptr<IntakeArm> Robot::intakeArm;
std::unique_ptr<OI> Robot::oi;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION

std::unique_ptr<LightingControl> Robot::lightingControl;

void Robot::RobotInit() {
	RobotMap::init();

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	driveSystem.reset(new DriveSystem());
	intake.reset(new Intake());
	intakeArm.reset(new IntakeArm());
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.
	oi.reset(new OI());

    // Set up the autonomous command (if appropriate)
#if defined(DISABLE_AUTO_MODE) || defined(USE_SELECTED_AUTO_CMD)
    autonomousCommand.reset(nullptr);
#else
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	autonomousCommand.reset(new AutonomousCommand(0));
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
#endif

	tankModeCommand.reset(new TankDrive);

    // Set up lighting control
    lightingControl.reset(new LightingController);

#ifdef ENABLE_USB_CAMERA
	CameraServer::GetInstance()->SetQuality(50);
	// The camera name (ex "cam0") can be found through the roborio web interface
	CameraServer::GetInstance()->StartAutomaticCapture("cam0");
#endif //ENABLE_USB_CAMERA
}

/**
 * This function is called when the disabled button is hit.
 * You can use it to reset subsystems before shutting down.
 */
void Robot::DisabledInit() {
	updateLighting();
}

void Robot::DisabledPeriodic() {
	Scheduler::GetInstance()->Run();
	updateLighting();
}

// CODE_REVIEW(mjh): What is this supposed to do?
int autoTimer;

void Robot::AutonomousInit() {
    // Updating lighting display
    updateLighting();
    
    // Start the command for autonomous mode.
#if !defined(DISABLE_AUTO_MODE) && defined(USE_SELECTED_AUTO_CMD)
    int chosenAuto = int(std::fmax(0, std::fmin(6,SmartDashboard::GetNumber("Auto Chooser", 2))));
    
    if (chosenAuto < 6) {
        autonomousCommand.reset(new AutonomousCommand(chosenAuto));
    } else if (chosenAuto == 6) {
        autonomousCommand.reset(new SpyBoxAutonmous());
    }
#elif !defined(DISABLE_AUTO_MODE)
    // CODE_REVIEW(mjh): Why aren't you just setting this up during the
    // initialization of the robot (in the constructor), rather than building
    // a new command every single time?
    autonomousCommand.reset(new TimedMove(4, 50));
#endif	// !DISABLE_AUTO_MODE && USE_SELECTED_AUTO_CMD
    
    if (autonomousCommand.get() != nullptr){
        autonomousCommand->Start();
    }
}

void Robot::AutonomousPeriodic() {
	updateLighting();
    
	Scheduler::GetInstance()->Run();
}

void Robot::TeleopInit() {
	updateLighting();

	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to
	// continue until interrupted by another command, remove
	// these lines or comment it out.
	if (autonomousCommand.get() != nullptr)
		autonomousCommand->Cancel();
	tankModeCommand->Start();
}

void Robot::TeleopPeriodic() {
	updateLighting();

	Scheduler::GetInstance()->Run();
}

void Robot::TestInit() {
	updateLighting();
}

void Robot::TestPeriodic() {
	updateLighting();
}

void Robot::updateLighting() {
    assert(lightingControl != nullptr);
    if (lightingControl != nullptr) {
        lightingControl->LightingUpkeep();
    }
}

START_ROBOT_CLASS(Robot);

