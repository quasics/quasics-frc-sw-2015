// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include "Shooter.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Shooter::Shooter() :
		Subsystem("Shooter") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	leftWheel = RobotMap::shooterLeftWheel;
	rightWheel = RobotMap::shooterRightWheel;
	intakePiston = RobotMap::shooterIntakePiston;
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void Shooter::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	// SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

// Put methods for controlling this subsystem
// here. Call these from Commands.

void Shooter::SetWheels(bool isOutput) {
	if (isOutput) {
		leftWheel->Set(1);
		rightWheel->Set(-1);
	} else {
		leftWheel->Set(-1);
		rightWheel->Set(1);
	}
}
void Shooter::SetPiston(bool isExtended) {
	if (isExtended)
		intakePiston->Set(DoubleSolenoid::kForward);
	else
		intakePiston->Set(DoubleSolenoid::kReverse);
}

void Shooter::StopWheels() {
	leftWheel->Set(0);
	rightWheel->Set(0);
}

void Shooter::StopPiston(){
	intakePiston->Set(DoubleSolenoid::kReverse);
}
